
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00003aaa  00003b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080010c  0080010c  00003bea  2**0
                  ALLOC
  3 .stab         000035dc  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001379  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008541  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008681  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a43a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b325  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 34       	cpi	r26, 0x40	; 64
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <main>
      8a:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ef       	ldi	r26, 0xFC	; 252
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ef       	ldi	r24, 0xFC	; 252
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_CreatePassword>:
uint8 u8_ticks=0;

/*********Function Implementation*********/

void HMI_CreatePassword(uint8* EnteredPass)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ec 97       	sbiw	r28, 0x3c	; 60
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c af       	std	Y+60, r25	; 0x3c
     b5c:	8b af       	std	Y+59, r24	; 0x3b
	uint8 u8_PressNum_1=1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	8a af       	std	Y+58, r24	; 0x3a
	LCD_displayString("Enter Password:");
     b62:	80 e6       	ldi	r24, 0x60	; 96
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
	LCD_moveCursor(1,0);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0e 94 1e 1b 	call	0x363c	; 0x363c <LCD_moveCursor>

	u8_key= KEYPAD_getPressedKey();
     b72:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
     b76:	80 93 2e 01 	sts	0x012E, r24
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a8 e4       	ldi	r26, 0x48	; 72
     b80:	b2 e4       	ldi	r27, 0x42	; 66
     b82:	8d ab       	std	Y+53, r24	; 0x35
     b84:	9e ab       	std	Y+54, r25	; 0x36
     b86:	af ab       	std	Y+55, r26	; 0x37
     b88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	6d a9       	ldd	r22, Y+53	; 0x35
     b8c:	7e a9       	ldd	r23, Y+54	; 0x36
     b8e:	8f a9       	ldd	r24, Y+55	; 0x37
     b90:	98 ad       	ldd	r25, Y+56	; 0x38
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a ef       	ldi	r20, 0xFA	; 250
     b98:	54 e4       	ldi	r21, 0x44	; 68
     b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	89 ab       	std	Y+49, r24	; 0x31
     ba4:	9a ab       	std	Y+50, r25	; 0x32
     ba6:	ab ab       	std	Y+51, r26	; 0x33
     ba8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     baa:	69 a9       	ldd	r22, Y+49	; 0x31
     bac:	7a a9       	ldd	r23, Y+50	; 0x32
     bae:	8b a9       	ldd	r24, Y+51	; 0x33
     bb0:	9c a9       	ldd	r25, Y+52	; 0x34
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <HMI_CreatePassword+0x86>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	98 ab       	std	Y+48, r25	; 0x30
     bc8:	8f a7       	std	Y+47, r24	; 0x2f
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <HMI_CreatePassword+0x104>
	else if (__tmp > 65535)
     bcc:	69 a9       	ldd	r22, Y+49	; 0x31
     bce:	7a a9       	ldd	r23, Y+50	; 0x32
     bd0:	8b a9       	ldd	r24, Y+51	; 0x33
     bd2:	9c a9       	ldd	r25, Y+52	; 0x34
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <HMI_CreatePassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	6d a9       	ldd	r22, Y+53	; 0x35
     be6:	7e a9       	ldd	r23, Y+54	; 0x36
     be8:	8f a9       	ldd	r24, Y+55	; 0x37
     bea:	98 ad       	ldd	r25, Y+56	; 0x38
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	98 ab       	std	Y+48, r25	; 0x30
     c0a:	8f a7       	std	Y+47, r24	; 0x2f
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <HMI_CreatePassword+0xe6>
     c0e:	88 ec       	ldi	r24, 0xC8	; 200
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9e a7       	std	Y+46, r25	; 0x2e
     c14:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	8d a5       	ldd	r24, Y+45	; 0x2d
     c18:	9e a5       	ldd	r25, Y+46	; 0x2e
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <HMI_CreatePassword+0xd4>
     c1e:	9e a7       	std	Y+46, r25	; 0x2e
     c20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	8f a5       	ldd	r24, Y+47	; 0x2f
     c24:	98 a9       	ldd	r25, Y+48	; 0x30
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	98 ab       	std	Y+48, r25	; 0x30
     c2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c2e:	98 a9       	ldd	r25, Y+48	; 0x30
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <HMI_CreatePassword+0xc8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <HMI_CreatePassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	69 a9       	ldd	r22, Y+49	; 0x31
     c38:	7a a9       	ldd	r23, Y+50	; 0x32
     c3a:	8b a9       	ldd	r24, Y+51	; 0x33
     c3c:	9c a9       	ldd	r25, Y+52	; 0x34
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	98 ab       	std	Y+48, r25	; 0x30
     c48:	8f a7       	std	Y+47, r24	; 0x2f
     c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4c:	98 a9       	ldd	r25, Y+48	; 0x30
     c4e:	9c a7       	std	Y+44, r25	; 0x2c
     c50:	8b a7       	std	Y+43, r24	; 0x2b
     c52:	8b a5       	ldd	r24, Y+43	; 0x2b
     c54:	9c a5       	ldd	r25, Y+44	; 0x2c
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <HMI_CreatePassword+0x110>
     c5a:	9c a7       	std	Y+44, r25	; 0x2c
     c5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);

	if(u8_key<=9 && u8_key>=0)
     c5e:	80 91 2e 01 	lds	r24, 0x012E
     c62:	8a 30       	cpi	r24, 0x0A	; 10
     c64:	08 f0       	brcs	.+2      	; 0xc68 <HMI_CreatePassword+0x122>
     c66:	92 c0       	rjmp	.+292    	; 0xd8c <HMI_CreatePassword+0x246>
	{
		LCD_displayString("*");
     c68:	80 e7       	ldi	r24, 0x70	; 112
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
		EnteredPass[0]= u8_key;
     c70:	80 91 2e 01 	lds	r24, 0x012E
     c74:	eb ad       	ldd	r30, Y+59	; 0x3b
     c76:	fc ad       	ldd	r31, Y+60	; 0x3c
     c78:	80 83       	st	Z, r24
     c7a:	88 c0       	rjmp	.+272    	; 0xd8c <HMI_CreatePassword+0x246>
	}

	while(u8_key<=9 && u8_key>=0 && u8_PressNum_1<PASSWORD_LENGTH)
	{
		u8_key= KEYPAD_getPressedKey();
     c7c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
     c80:	80 93 2e 01 	sts	0x012E, r24
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	a8 e4       	ldi	r26, 0x48	; 72
     c8a:	b2 e4       	ldi	r27, 0x42	; 66
     c8c:	8f a3       	std	Y+39, r24	; 0x27
     c8e:	98 a7       	std	Y+40, r25	; 0x28
     c90:	a9 a7       	std	Y+41, r26	; 0x29
     c92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c94:	6f a1       	ldd	r22, Y+39	; 0x27
     c96:	78 a5       	ldd	r23, Y+40	; 0x28
     c98:	89 a5       	ldd	r24, Y+41	; 0x29
     c9a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a ef       	ldi	r20, 0xFA	; 250
     ca2:	54 e4       	ldi	r21, 0x44	; 68
     ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	8b a3       	std	Y+35, r24	; 0x23
     cae:	9c a3       	std	Y+36, r25	; 0x24
     cb0:	ad a3       	std	Y+37, r26	; 0x25
     cb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cb4:	6b a1       	ldd	r22, Y+35	; 0x23
     cb6:	7c a1       	ldd	r23, Y+36	; 0x24
     cb8:	8d a1       	ldd	r24, Y+37	; 0x25
     cba:	9e a1       	ldd	r25, Y+38	; 0x26
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc8:	88 23       	and	r24, r24
     cca:	2c f4       	brge	.+10     	; 0xcd6 <HMI_CreatePassword+0x190>
		__ticks = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9a a3       	std	Y+34, r25	; 0x22
     cd2:	89 a3       	std	Y+33, r24	; 0x21
     cd4:	3f c0       	rjmp	.+126    	; 0xd54 <HMI_CreatePassword+0x20e>
	else if (__tmp > 65535)
     cd6:	6b a1       	ldd	r22, Y+35	; 0x23
     cd8:	7c a1       	ldd	r23, Y+36	; 0x24
     cda:	8d a1       	ldd	r24, Y+37	; 0x25
     cdc:	9e a1       	ldd	r25, Y+38	; 0x26
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cea:	18 16       	cp	r1, r24
     cec:	4c f5       	brge	.+82     	; 0xd40 <HMI_CreatePassword+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	6f a1       	ldd	r22, Y+39	; 0x27
     cf0:	78 a5       	ldd	r23, Y+40	; 0x28
     cf2:	89 a5       	ldd	r24, Y+41	; 0x29
     cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9a a3       	std	Y+34, r25	; 0x22
     d14:	89 a3       	std	Y+33, r24	; 0x21
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <HMI_CreatePassword+0x1f0>
     d18:	88 ec       	ldi	r24, 0xC8	; 200
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	98 a3       	std	Y+32, r25	; 0x20
     d1e:	8f 8f       	std	Y+31, r24	; 0x1f
     d20:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d22:	98 a1       	ldd	r25, Y+32	; 0x20
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <HMI_CreatePassword+0x1de>
     d28:	98 a3       	std	Y+32, r25	; 0x20
     d2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2c:	89 a1       	ldd	r24, Y+33	; 0x21
     d2e:	9a a1       	ldd	r25, Y+34	; 0x22
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	9a a3       	std	Y+34, r25	; 0x22
     d34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d36:	89 a1       	ldd	r24, Y+33	; 0x21
     d38:	9a a1       	ldd	r25, Y+34	; 0x22
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	69 f7       	brne	.-38     	; 0xd18 <HMI_CreatePassword+0x1d2>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <HMI_CreatePassword+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d40:	6b a1       	ldd	r22, Y+35	; 0x23
     d42:	7c a1       	ldd	r23, Y+36	; 0x24
     d44:	8d a1       	ldd	r24, Y+37	; 0x25
     d46:	9e a1       	ldd	r25, Y+38	; 0x26
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9a a3       	std	Y+34, r25	; 0x22
     d52:	89 a3       	std	Y+33, r24	; 0x21
     d54:	89 a1       	ldd	r24, Y+33	; 0x21
     d56:	9a a1       	ldd	r25, Y+34	; 0x22
     d58:	9e 8f       	std	Y+30, r25	; 0x1e
     d5a:	8d 8f       	std	Y+29, r24	; 0x1d
     d5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <HMI_CreatePassword+0x21a>
     d64:	9e 8f       	std	Y+30, r25	; 0x1e
     d66:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		LCD_displayString("*");
     d68:	80 e7       	ldi	r24, 0x70	; 112
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
		EnteredPass[u8_PressNum_1]= u8_key;
     d70:	8a ad       	ldd	r24, Y+58	; 0x3a
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	8b ad       	ldd	r24, Y+59	; 0x3b
     d78:	9c ad       	ldd	r25, Y+60	; 0x3c
     d7a:	fc 01       	movw	r30, r24
     d7c:	e2 0f       	add	r30, r18
     d7e:	f3 1f       	adc	r31, r19
     d80:	80 91 2e 01 	lds	r24, 0x012E
     d84:	80 83       	st	Z, r24
		u8_PressNum_1++;
     d86:	8a ad       	ldd	r24, Y+58	; 0x3a
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	8a af       	std	Y+58, r24	; 0x3a
	{
		LCD_displayString("*");
		EnteredPass[0]= u8_key;
	}

	while(u8_key<=9 && u8_key>=0 && u8_PressNum_1<PASSWORD_LENGTH)
     d8c:	80 91 2e 01 	lds	r24, 0x012E
     d90:	8a 30       	cpi	r24, 0x0A	; 10
     d92:	20 f4       	brcc	.+8      	; 0xd9c <HMI_CreatePassword+0x256>
     d94:	8a ad       	ldd	r24, Y+58	; 0x3a
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	08 f4       	brcc	.+2      	; 0xd9c <HMI_CreatePassword+0x256>
     d9a:	70 cf       	rjmp	.-288    	; 0xc7c <HMI_CreatePassword+0x136>
		LCD_displayString("*");
		EnteredPass[u8_PressNum_1]= u8_key;
		u8_PressNum_1++;
	}

	u8_key= KEYPAD_getPressedKey();
     d9c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
     da0:	80 93 2e 01 	sts	0x012E, r24
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a8 e4       	ldi	r26, 0x48	; 72
     daa:	b2 e4       	ldi	r27, 0x42	; 66
     dac:	89 8f       	std	Y+25, r24	; 0x19
     dae:	9a 8f       	std	Y+26, r25	; 0x1a
     db0:	ab 8f       	std	Y+27, r26	; 0x1b
     db2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db4:	69 8d       	ldd	r22, Y+25	; 0x19
     db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	4a ef       	ldi	r20, 0xFA	; 250
     dc2:	54 e4       	ldi	r21, 0x44	; 68
     dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	8d 8b       	std	Y+21, r24	; 0x15
     dce:	9e 8b       	std	Y+22, r25	; 0x16
     dd0:	af 8b       	std	Y+23, r26	; 0x17
     dd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dd4:	6d 89       	ldd	r22, Y+21	; 0x15
     dd6:	7e 89       	ldd	r23, Y+22	; 0x16
     dd8:	8f 89       	ldd	r24, Y+23	; 0x17
     dda:	98 8d       	ldd	r25, Y+24	; 0x18
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de8:	88 23       	and	r24, r24
     dea:	2c f4       	brge	.+10     	; 0xdf6 <HMI_CreatePassword+0x2b0>
		__ticks = 1;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 8b       	std	Y+20, r25	; 0x14
     df2:	8b 8b       	std	Y+19, r24	; 0x13
     df4:	3f c0       	rjmp	.+126    	; 0xe74 <HMI_CreatePassword+0x32e>
	else if (__tmp > 65535)
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	4f e7       	ldi	r20, 0x7F	; 127
     e04:	57 e4       	ldi	r21, 0x47	; 71
     e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0a:	18 16       	cp	r1, r24
     e0c:	4c f5       	brge	.+82     	; 0xe60 <HMI_CreatePassword+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0e:	69 8d       	ldd	r22, Y+25	; 0x19
     e10:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e2       	ldi	r20, 0x20	; 32
     e1c:	51 e4       	ldi	r21, 0x41	; 65
     e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	bc 01       	movw	r22, r24
     e28:	cd 01       	movw	r24, r26
     e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	9c 8b       	std	Y+20, r25	; 0x14
     e34:	8b 8b       	std	Y+19, r24	; 0x13
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <HMI_CreatePassword+0x310>
     e38:	88 ec       	ldi	r24, 0xC8	; 200
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9a 8b       	std	Y+18, r25	; 0x12
     e3e:	89 8b       	std	Y+17, r24	; 0x11
     e40:	89 89       	ldd	r24, Y+17	; 0x11
     e42:	9a 89       	ldd	r25, Y+18	; 0x12
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <HMI_CreatePassword+0x2fe>
     e48:	9a 8b       	std	Y+18, r25	; 0x12
     e4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4c:	8b 89       	ldd	r24, Y+19	; 0x13
     e4e:	9c 89       	ldd	r25, Y+20	; 0x14
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	9c 8b       	std	Y+20, r25	; 0x14
     e54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	8b 89       	ldd	r24, Y+19	; 0x13
     e58:	9c 89       	ldd	r25, Y+20	; 0x14
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	69 f7       	brne	.-38     	; 0xe38 <HMI_CreatePassword+0x2f2>
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <HMI_CreatePassword+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e60:	6d 89       	ldd	r22, Y+21	; 0x15
     e62:	7e 89       	ldd	r23, Y+22	; 0x16
     e64:	8f 89       	ldd	r24, Y+23	; 0x17
     e66:	98 8d       	ldd	r25, Y+24	; 0x18
     e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9c 8b       	std	Y+20, r25	; 0x14
     e72:	8b 8b       	std	Y+19, r24	; 0x13
     e74:	8b 89       	ldd	r24, Y+19	; 0x13
     e76:	9c 89       	ldd	r25, Y+20	; 0x14
     e78:	98 8b       	std	Y+16, r25	; 0x10
     e7a:	8f 87       	std	Y+15, r24	; 0x0f
     e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7e:	98 89       	ldd	r25, Y+16	; 0x10
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <HMI_CreatePassword+0x33a>
     e84:	98 8b       	std	Y+16, r25	; 0x10
     e86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);

	if(u8_key==ENTER_KEY  && u8_PressNum_1==PASSWORD_LENGTH)
     e88:	80 91 2e 01 	lds	r24, 0x012E
     e8c:	8d 33       	cpi	r24, 0x3D	; 61
     e8e:	09 f0       	breq	.+2      	; 0xe92 <HMI_CreatePassword+0x34c>
     e90:	91 c0       	rjmp	.+290    	; 0xfb4 <HMI_CreatePassword+0x46e>
     e92:	8a ad       	ldd	r24, Y+58	; 0x3a
     e94:	85 30       	cpi	r24, 0x05	; 5
     e96:	09 f0       	breq	.+2      	; 0xe9a <HMI_CreatePassword+0x354>
     e98:	8d c0       	rjmp	.+282    	; 0xfb4 <HMI_CreatePassword+0x46e>
	{
		LCD_clearScreen();
     e9a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
     e9e:	19 ae       	std	Y+57, r1	; 0x39
     ea0:	85 c0       	rjmp	.+266    	; 0xfac <HMI_CreatePassword+0x466>
		{
			g_Password1[i]=EnteredPass[i];
     ea2:	89 ad       	ldd	r24, Y+57	; 0x39
     ea4:	48 2f       	mov	r20, r24
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	89 ad       	ldd	r24, Y+57	; 0x39
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8b ad       	ldd	r24, Y+59	; 0x3b
     eb0:	9c ad       	ldd	r25, Y+60	; 0x3c
     eb2:	fc 01       	movw	r30, r24
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	80 81       	ld	r24, Z
     eba:	fa 01       	movw	r30, r20
     ebc:	ec 5e       	subi	r30, 0xEC	; 236
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	80 83       	st	Z, r24
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a8 e4       	ldi	r26, 0x48	; 72
     ec8:	b2 e4       	ldi	r27, 0x42	; 66
     eca:	8b 87       	std	Y+11, r24	; 0x0b
     ecc:	9c 87       	std	Y+12, r25	; 0x0c
     ece:	ad 87       	std	Y+13, r26	; 0x0d
     ed0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	4a ef       	ldi	r20, 0xFA	; 250
     ee0:	54 e4       	ldi	r21, 0x44	; 68
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8f 83       	std	Y+7, r24	; 0x07
     eec:	98 87       	std	Y+8, r25	; 0x08
     eee:	a9 87       	std	Y+9, r26	; 0x09
     ef0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef2:	6f 81       	ldd	r22, Y+7	; 0x07
     ef4:	78 85       	ldd	r23, Y+8	; 0x08
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f06:	88 23       	and	r24, r24
     f08:	2c f4       	brge	.+10     	; 0xf14 <HMI_CreatePassword+0x3ce>
		__ticks = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	3f c0       	rjmp	.+126    	; 0xf92 <HMI_CreatePassword+0x44c>
	else if (__tmp > 65535)
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	4f e7       	ldi	r20, 0x7F	; 127
     f22:	57 e4       	ldi	r21, 0x47	; 71
     f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f28:	18 16       	cp	r1, r24
     f2a:	4c f5       	brge	.+82     	; 0xf7e <HMI_CreatePassword+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <HMI_CreatePassword+0x42e>
     f56:	88 ec       	ldi	r24, 0xC8	; 200
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <HMI_CreatePassword+0x41c>
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f7       	brne	.-38     	; 0xf56 <HMI_CreatePassword+0x410>
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <HMI_CreatePassword+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	6f 81       	ldd	r22, Y+7	; 0x07
     f80:	78 85       	ldd	r23, Y+8	; 0x08
     f82:	89 85       	ldd	r24, Y+9	; 0x09
     f84:	9a 85       	ldd	r25, Y+10	; 0x0a
     f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <HMI_CreatePassword+0x458>
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	if(u8_key==ENTER_KEY  && u8_PressNum_1==PASSWORD_LENGTH)
	{
		LCD_clearScreen();
		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
     fa6:	89 ad       	ldd	r24, Y+57	; 0x39
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	89 af       	std	Y+57, r24	; 0x39
     fac:	89 ad       	ldd	r24, Y+57	; 0x39
     fae:	85 30       	cpi	r24, 0x05	; 5
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <HMI_CreatePassword+0x46e>
     fb2:	77 cf       	rjmp	.-274    	; 0xea2 <HMI_CreatePassword+0x35c>
		{
			g_Password1[i]=EnteredPass[i];
			_delay_ms(50);
		}
	}
}
     fb4:	ec 96       	adiw	r28, 0x3c	; 60
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <HMI_ConfirmPassword>:
void HMI_ConfirmPassword(uint8* ReEnteredPass)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	ec 97       	sbiw	r28, 0x3c	; 60
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	9c af       	std	Y+60, r25	; 0x3c
     fdc:	8b af       	std	Y+59, r24	; 0x3b
	uint8 u8_PressNum_2=1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8a af       	std	Y+58, r24	; 0x3a
	LCD_clearScreen();
     fe2:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
	LCD_displayString("ReEnter Password:");
     fe6:	82 e7       	ldi	r24, 0x72	; 114
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
	LCD_moveCursor(1,0);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	0e 94 1e 1b 	call	0x363c	; 0x363c <LCD_moveCursor>

	u8_key= KEYPAD_getPressedKey();
     ff6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
     ffa:	80 93 2e 01 	sts	0x012E, r24
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a8 e4       	ldi	r26, 0x48	; 72
    1004:	b2 e4       	ldi	r27, 0x42	; 66
    1006:	8d ab       	std	Y+53, r24	; 0x35
    1008:	9e ab       	std	Y+54, r25	; 0x36
    100a:	af ab       	std	Y+55, r26	; 0x37
    100c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100e:	6d a9       	ldd	r22, Y+53	; 0x35
    1010:	7e a9       	ldd	r23, Y+54	; 0x36
    1012:	8f a9       	ldd	r24, Y+55	; 0x37
    1014:	98 ad       	ldd	r25, Y+56	; 0x38
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4a ef       	ldi	r20, 0xFA	; 250
    101c:	54 e4       	ldi	r21, 0x44	; 68
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	89 ab       	std	Y+49, r24	; 0x31
    1028:	9a ab       	std	Y+50, r25	; 0x32
    102a:	ab ab       	std	Y+51, r26	; 0x33
    102c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    102e:	69 a9       	ldd	r22, Y+49	; 0x31
    1030:	7a a9       	ldd	r23, Y+50	; 0x32
    1032:	8b a9       	ldd	r24, Y+51	; 0x33
    1034:	9c a9       	ldd	r25, Y+52	; 0x34
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1042:	88 23       	and	r24, r24
    1044:	2c f4       	brge	.+10     	; 0x1050 <HMI_ConfirmPassword+0x8a>
		__ticks = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	98 ab       	std	Y+48, r25	; 0x30
    104c:	8f a7       	std	Y+47, r24	; 0x2f
    104e:	3f c0       	rjmp	.+126    	; 0x10ce <HMI_ConfirmPassword+0x108>
	else if (__tmp > 65535)
    1050:	69 a9       	ldd	r22, Y+49	; 0x31
    1052:	7a a9       	ldd	r23, Y+50	; 0x32
    1054:	8b a9       	ldd	r24, Y+51	; 0x33
    1056:	9c a9       	ldd	r25, Y+52	; 0x34
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	3f ef       	ldi	r19, 0xFF	; 255
    105c:	4f e7       	ldi	r20, 0x7F	; 127
    105e:	57 e4       	ldi	r21, 0x47	; 71
    1060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1064:	18 16       	cp	r1, r24
    1066:	4c f5       	brge	.+82     	; 0x10ba <HMI_ConfirmPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1068:	6d a9       	ldd	r22, Y+53	; 0x35
    106a:	7e a9       	ldd	r23, Y+54	; 0x36
    106c:	8f a9       	ldd	r24, Y+55	; 0x37
    106e:	98 ad       	ldd	r25, Y+56	; 0x38
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e2       	ldi	r20, 0x20	; 32
    1076:	51 e4       	ldi	r21, 0x41	; 65
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	98 ab       	std	Y+48, r25	; 0x30
    108e:	8f a7       	std	Y+47, r24	; 0x2f
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <HMI_ConfirmPassword+0xea>
    1092:	88 ec       	ldi	r24, 0xC8	; 200
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9e a7       	std	Y+46, r25	; 0x2e
    1098:	8d a7       	std	Y+45, r24	; 0x2d
    109a:	8d a5       	ldd	r24, Y+45	; 0x2d
    109c:	9e a5       	ldd	r25, Y+46	; 0x2e
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <HMI_ConfirmPassword+0xd8>
    10a2:	9e a7       	std	Y+46, r25	; 0x2e
    10a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a8:	98 a9       	ldd	r25, Y+48	; 0x30
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	98 ab       	std	Y+48, r25	; 0x30
    10ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10b2:	98 a9       	ldd	r25, Y+48	; 0x30
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	69 f7       	brne	.-38     	; 0x1092 <HMI_ConfirmPassword+0xcc>
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <HMI_ConfirmPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ba:	69 a9       	ldd	r22, Y+49	; 0x31
    10bc:	7a a9       	ldd	r23, Y+50	; 0x32
    10be:	8b a9       	ldd	r24, Y+51	; 0x33
    10c0:	9c a9       	ldd	r25, Y+52	; 0x34
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	98 ab       	std	Y+48, r25	; 0x30
    10cc:	8f a7       	std	Y+47, r24	; 0x2f
    10ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d0:	98 a9       	ldd	r25, Y+48	; 0x30
    10d2:	9c a7       	std	Y+44, r25	; 0x2c
    10d4:	8b a7       	std	Y+43, r24	; 0x2b
    10d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <HMI_ConfirmPassword+0x114>
    10de:	9c a7       	std	Y+44, r25	; 0x2c
    10e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);

	if(u8_key<=9 && u8_key>=0)
    10e2:	80 91 2e 01 	lds	r24, 0x012E
    10e6:	8a 30       	cpi	r24, 0x0A	; 10
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <HMI_ConfirmPassword+0x126>
    10ea:	92 c0       	rjmp	.+292    	; 0x1210 <HMI_ConfirmPassword+0x24a>
	{
		LCD_displayString("*");
    10ec:	80 e7       	ldi	r24, 0x70	; 112
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
		ReEnteredPass[0]= u8_key;
    10f4:	80 91 2e 01 	lds	r24, 0x012E
    10f8:	eb ad       	ldd	r30, Y+59	; 0x3b
    10fa:	fc ad       	ldd	r31, Y+60	; 0x3c
    10fc:	80 83       	st	Z, r24
    10fe:	88 c0       	rjmp	.+272    	; 0x1210 <HMI_ConfirmPassword+0x24a>
	}

	while(u8_key<=9 && u8_key>=0 && u8_PressNum_2<PASSWORD_LENGTH)
	{
		u8_key= KEYPAD_getPressedKey();
    1100:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
    1104:	80 93 2e 01 	sts	0x012E, r24
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a8 e4       	ldi	r26, 0x48	; 72
    110e:	b2 e4       	ldi	r27, 0x42	; 66
    1110:	8f a3       	std	Y+39, r24	; 0x27
    1112:	98 a7       	std	Y+40, r25	; 0x28
    1114:	a9 a7       	std	Y+41, r26	; 0x29
    1116:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6f a1       	ldd	r22, Y+39	; 0x27
    111a:	78 a5       	ldd	r23, Y+40	; 0x28
    111c:	89 a5       	ldd	r24, Y+41	; 0x29
    111e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8b a3       	std	Y+35, r24	; 0x23
    1132:	9c a3       	std	Y+36, r25	; 0x24
    1134:	ad a3       	std	Y+37, r26	; 0x25
    1136:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1138:	6b a1       	ldd	r22, Y+35	; 0x23
    113a:	7c a1       	ldd	r23, Y+36	; 0x24
    113c:	8d a1       	ldd	r24, Y+37	; 0x25
    113e:	9e a1       	ldd	r25, Y+38	; 0x26
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <HMI_ConfirmPassword+0x194>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <HMI_ConfirmPassword+0x212>
	else if (__tmp > 65535)
    115a:	6b a1       	ldd	r22, Y+35	; 0x23
    115c:	7c a1       	ldd	r23, Y+36	; 0x24
    115e:	8d a1       	ldd	r24, Y+37	; 0x25
    1160:	9e a1       	ldd	r25, Y+38	; 0x26
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <HMI_ConfirmPassword+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6f a1       	ldd	r22, Y+39	; 0x27
    1174:	78 a5       	ldd	r23, Y+40	; 0x28
    1176:	89 a5       	ldd	r24, Y+41	; 0x29
    1178:	9a a5       	ldd	r25, Y+42	; 0x2a
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9a a3       	std	Y+34, r25	; 0x22
    1198:	89 a3       	std	Y+33, r24	; 0x21
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <HMI_ConfirmPassword+0x1f4>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	98 a3       	std	Y+32, r25	; 0x20
    11a2:	8f 8f       	std	Y+31, r24	; 0x1f
    11a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11a6:	98 a1       	ldd	r25, Y+32	; 0x20
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <HMI_ConfirmPassword+0x1e2>
    11ac:	98 a3       	std	Y+32, r25	; 0x20
    11ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	89 a1       	ldd	r24, Y+33	; 0x21
    11b2:	9a a1       	ldd	r25, Y+34	; 0x22
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9a a3       	std	Y+34, r25	; 0x22
    11b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	89 a1       	ldd	r24, Y+33	; 0x21
    11bc:	9a a1       	ldd	r25, Y+34	; 0x22
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <HMI_ConfirmPassword+0x1d6>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <HMI_ConfirmPassword+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6b a1       	ldd	r22, Y+35	; 0x23
    11c6:	7c a1       	ldd	r23, Y+36	; 0x24
    11c8:	8d a1       	ldd	r24, Y+37	; 0x25
    11ca:	9e a1       	ldd	r25, Y+38	; 0x26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9a a3       	std	Y+34, r25	; 0x22
    11d6:	89 a3       	std	Y+33, r24	; 0x21
    11d8:	89 a1       	ldd	r24, Y+33	; 0x21
    11da:	9a a1       	ldd	r25, Y+34	; 0x22
    11dc:	9e 8f       	std	Y+30, r25	; 0x1e
    11de:	8d 8f       	std	Y+29, r24	; 0x1d
    11e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <HMI_ConfirmPassword+0x21e>
    11e8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ea:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		LCD_displayString("*");
    11ec:	80 e7       	ldi	r24, 0x70	; 112
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
		ReEnteredPass[u8_PressNum_2]= u8_key;
    11f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    11fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    11fe:	fc 01       	movw	r30, r24
    1200:	e2 0f       	add	r30, r18
    1202:	f3 1f       	adc	r31, r19
    1204:	80 91 2e 01 	lds	r24, 0x012E
    1208:	80 83       	st	Z, r24
		u8_PressNum_2++;
    120a:	8a ad       	ldd	r24, Y+58	; 0x3a
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	8a af       	std	Y+58, r24	; 0x3a
	{
		LCD_displayString("*");
		ReEnteredPass[0]= u8_key;
	}

	while(u8_key<=9 && u8_key>=0 && u8_PressNum_2<PASSWORD_LENGTH)
    1210:	80 91 2e 01 	lds	r24, 0x012E
    1214:	8a 30       	cpi	r24, 0x0A	; 10
    1216:	20 f4       	brcc	.+8      	; 0x1220 <HMI_ConfirmPassword+0x25a>
    1218:	8a ad       	ldd	r24, Y+58	; 0x3a
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	08 f4       	brcc	.+2      	; 0x1220 <HMI_ConfirmPassword+0x25a>
    121e:	70 cf       	rjmp	.-288    	; 0x1100 <HMI_ConfirmPassword+0x13a>
		LCD_displayString("*");
		ReEnteredPass[u8_PressNum_2]= u8_key;
		u8_PressNum_2++;
	}

	u8_key= KEYPAD_getPressedKey();
    1220:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
    1224:	80 93 2e 01 	sts	0x012E, r24
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a0 e2       	ldi	r26, 0x20	; 32
    122e:	b2 e4       	ldi	r27, 0x42	; 66
    1230:	89 8f       	std	Y+25, r24	; 0x19
    1232:	9a 8f       	std	Y+26, r25	; 0x1a
    1234:	ab 8f       	std	Y+27, r26	; 0x1b
    1236:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1238:	69 8d       	ldd	r22, Y+25	; 0x19
    123a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    123c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	4a ef       	ldi	r20, 0xFA	; 250
    1246:	54 e4       	ldi	r21, 0x44	; 68
    1248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	8d 8b       	std	Y+21, r24	; 0x15
    1252:	9e 8b       	std	Y+22, r25	; 0x16
    1254:	af 8b       	std	Y+23, r26	; 0x17
    1256:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1258:	6d 89       	ldd	r22, Y+21	; 0x15
    125a:	7e 89       	ldd	r23, Y+22	; 0x16
    125c:	8f 89       	ldd	r24, Y+23	; 0x17
    125e:	98 8d       	ldd	r25, Y+24	; 0x18
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e8       	ldi	r20, 0x80	; 128
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126c:	88 23       	and	r24, r24
    126e:	2c f4       	brge	.+10     	; 0x127a <HMI_ConfirmPassword+0x2b4>
		__ticks = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
    1278:	3f c0       	rjmp	.+126    	; 0x12f8 <HMI_ConfirmPassword+0x332>
	else if (__tmp > 65535)
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	8f 89       	ldd	r24, Y+23	; 0x17
    1280:	98 8d       	ldd	r25, Y+24	; 0x18
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	3f ef       	ldi	r19, 0xFF	; 255
    1286:	4f e7       	ldi	r20, 0x7F	; 127
    1288:	57 e4       	ldi	r21, 0x47	; 71
    128a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128e:	18 16       	cp	r1, r24
    1290:	4c f5       	brge	.+82     	; 0x12e4 <HMI_ConfirmPassword+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1292:	69 8d       	ldd	r22, Y+25	; 0x19
    1294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	51 e4       	ldi	r21, 0x41	; 65
    12a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9c 8b       	std	Y+20, r25	; 0x14
    12b8:	8b 8b       	std	Y+19, r24	; 0x13
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <HMI_ConfirmPassword+0x314>
    12bc:	88 ec       	ldi	r24, 0xC8	; 200
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9a 8b       	std	Y+18, r25	; 0x12
    12c2:	89 8b       	std	Y+17, r24	; 0x11
    12c4:	89 89       	ldd	r24, Y+17	; 0x11
    12c6:	9a 89       	ldd	r25, Y+18	; 0x12
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <HMI_ConfirmPassword+0x302>
    12cc:	9a 8b       	std	Y+18, r25	; 0x12
    12ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	9c 89       	ldd	r25, Y+20	; 0x14
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9c 8b       	std	Y+20, r25	; 0x14
    12d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	69 f7       	brne	.-38     	; 0x12bc <HMI_ConfirmPassword+0x2f6>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <HMI_ConfirmPassword+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6d 89       	ldd	r22, Y+21	; 0x15
    12e6:	7e 89       	ldd	r23, Y+22	; 0x16
    12e8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ea:	98 8d       	ldd	r25, Y+24	; 0x18
    12ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9c 8b       	std	Y+20, r25	; 0x14
    12f6:	8b 8b       	std	Y+19, r24	; 0x13
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	98 8b       	std	Y+16, r25	; 0x10
    12fe:	8f 87       	std	Y+15, r24	; 0x0f
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	98 89       	ldd	r25, Y+16	; 0x10
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <HMI_ConfirmPassword+0x33e>
    1308:	98 8b       	std	Y+16, r25	; 0x10
    130a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);

	if(u8_key==ENTER_KEY && u8_PressNum_2==PASSWORD_LENGTH)
    130c:	80 91 2e 01 	lds	r24, 0x012E
    1310:	8d 33       	cpi	r24, 0x3D	; 61
    1312:	09 f0       	breq	.+2      	; 0x1316 <HMI_ConfirmPassword+0x350>
    1314:	8f c0       	rjmp	.+286    	; 0x1434 <HMI_ConfirmPassword+0x46e>
    1316:	8a ad       	ldd	r24, Y+58	; 0x3a
    1318:	85 30       	cpi	r24, 0x05	; 5
    131a:	09 f0       	breq	.+2      	; 0x131e <HMI_ConfirmPassword+0x358>
    131c:	8b c0       	rjmp	.+278    	; 0x1434 <HMI_ConfirmPassword+0x46e>
	{
		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    131e:	19 ae       	std	Y+57, r1	; 0x39
    1320:	85 c0       	rjmp	.+266    	; 0x142c <HMI_ConfirmPassword+0x466>
		{
			g_Password2[i]=ReEnteredPass[i];
    1322:	89 ad       	ldd	r24, Y+57	; 0x39
    1324:	48 2f       	mov	r20, r24
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	89 ad       	ldd	r24, Y+57	; 0x39
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1330:	9c ad       	ldd	r25, Y+60	; 0x3c
    1332:	fc 01       	movw	r30, r24
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	80 81       	ld	r24, Z
    133a:	fa 01       	movw	r30, r20
    133c:	e1 5e       	subi	r30, 0xE1	; 225
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	80 83       	st	Z, r24
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a8 e4       	ldi	r26, 0x48	; 72
    1348:	b2 e4       	ldi	r27, 0x42	; 66
    134a:	8b 87       	std	Y+11, r24	; 0x0b
    134c:	9c 87       	std	Y+12, r25	; 0x0c
    134e:	ad 87       	std	Y+13, r26	; 0x0d
    1350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a ef       	ldi	r20, 0xFA	; 250
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8f 83       	std	Y+7, r24	; 0x07
    136c:	98 87       	std	Y+8, r25	; 0x08
    136e:	a9 87       	std	Y+9, r26	; 0x09
    1370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <HMI_ConfirmPassword+0x3ce>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9e 83       	std	Y+6, r25	; 0x06
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <HMI_ConfirmPassword+0x44c>
	else if (__tmp > 65535)
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <HMI_ConfirmPassword+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <HMI_ConfirmPassword+0x42e>
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <HMI_ConfirmPassword+0x41c>
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <HMI_ConfirmPassword+0x410>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <HMI_ConfirmPassword+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <HMI_ConfirmPassword+0x458>
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	u8_key= KEYPAD_getPressedKey();
	_delay_ms(40);

	if(u8_key==ENTER_KEY && u8_PressNum_2==PASSWORD_LENGTH)
	{
		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    1426:	89 ad       	ldd	r24, Y+57	; 0x39
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	89 af       	std	Y+57, r24	; 0x39
    142c:	89 ad       	ldd	r24, Y+57	; 0x39
    142e:	85 30       	cpi	r24, 0x05	; 5
    1430:	08 f4       	brcc	.+2      	; 0x1434 <HMI_ConfirmPassword+0x46e>
    1432:	77 cf       	rjmp	.-274    	; 0x1322 <HMI_ConfirmPassword+0x35c>
		{
			g_Password2[i]=ReEnteredPass[i];
			_delay_ms(50);
		}
	}
}
    1434:	ec 96       	adiw	r28, 0x3c	; 60
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <HMI_CheckifPassMatch>:
uint8 HMI_CheckifPassMatch(uint8* Enter_Pass,uint8* ReEnter_Pass)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <HMI_CheckifPassMatch+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <HMI_CheckifPassMatch+0x8>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <HMI_CheckifPassMatch+0xa>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	7d 83       	std	Y+5, r23	; 0x05
    145a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	1a c0       	rjmp	.+52     	; 0x1494 <HMI_CheckifPassMatch+0x4e>
	while(i<PASSWORD_LENGTH)
	{
		if(Enter_Pass[i]==ReEnter_Pass[i])
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	fc 01       	movw	r30, r24
    146c:	e2 0f       	add	r30, r18
    146e:	f3 1f       	adc	r31, r19
    1470:	40 81       	ld	r20, Z
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	fc 01       	movw	r30, r24
    147e:	e2 0f       	add	r30, r18
    1480:	f3 1f       	adc	r31, r19
    1482:	80 81       	ld	r24, Z
    1484:	48 17       	cp	r20, r24
    1486:	21 f4       	brne	.+8      	; 0x1490 <HMI_CheckifPassMatch+0x4a>

		{
			i++;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <HMI_CheckifPassMatch+0x4e>
		}
		else
		{
			return ERROR;
    1490:	1e 82       	std	Y+6, r1	; 0x06
    1492:	05 c0       	rjmp	.+10     	; 0x149e <HMI_CheckifPassMatch+0x58>
	}
}
uint8 HMI_CheckifPassMatch(uint8* Enter_Pass,uint8* ReEnter_Pass)
{
	uint8 i=0;
	while(i<PASSWORD_LENGTH)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	85 30       	cpi	r24, 0x05	; 5
    1498:	18 f3       	brcs	.-58     	; 0x1460 <HMI_CheckifPassMatch+0x1a>
		else
		{
			return ERROR;
		}
	}
	return SUCCESS;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	8e 83       	std	Y+6, r24	; 0x06
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    14a0:	26 96       	adiw	r28, 0x06	; 6
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <HMI_MainOptions>:
void HMI_MainOptions(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    14ba:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    14be:	84 e8       	ldi	r24, 0x84	; 132
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
	LCD_moveCursor(1,0);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	0e 94 1e 1b 	call	0x363c	; 0x363c <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    14ce:	82 e9       	ldi	r24, 0x92	; 146
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <HMI_EnterPassword>:
void HMI_EnterPassword(uint8* Enteredpass)
{
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	ca 54       	subi	r28, 0x4A	; 74
    14ea:	d0 40       	sbci	r29, 0x00	; 0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	fe 01       	movw	r30, r28
    14f8:	e7 5b       	subi	r30, 0xB7	; 183
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
	uint8 u8_PressNum_1=1;
    1500:	fe 01       	movw	r30, r28
    1502:	e8 5b       	subi	r30, 0xB8	; 184
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 83       	st	Z, r24
	LCD_clearScreen();
    150a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
	LCD_displayString("Welcome Back!");
    150e:	82 ea       	ldi	r24, 0xA2	; 162
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
    1516:	fe 01       	movw	r30, r28
    1518:	ed 5b       	subi	r30, 0xBD	; 189
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e7       	ldi	r26, 0x70	; 112
    1522:	b2 e4       	ldi	r27, 0x42	; 66
    1524:	80 83       	st	Z, r24
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	a2 83       	std	Z+2, r26	; 0x02
    152a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	8e 01       	movw	r16, r28
    152e:	01 5c       	subi	r16, 0xC1	; 193
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	fe 01       	movw	r30, r28
    1534:	ed 5b       	subi	r30, 0xBD	; 189
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	80 83       	st	Z, r24
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	a2 83       	std	Z+2, r26	; 0x02
    1558:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    155a:	fe 01       	movw	r30, r28
    155c:	ff 96       	adiw	r30, 0x3f	; 63
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	2c f4       	brge	.+10     	; 0x1580 <HMI_EnterPassword+0xa4>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9e af       	std	Y+62, r25	; 0x3e
    157c:	8d af       	std	Y+61, r24	; 0x3d
    157e:	46 c0       	rjmp	.+140    	; 0x160c <HMI_EnterPassword+0x130>
	else if (__tmp > 65535)
    1580:	fe 01       	movw	r30, r28
    1582:	ff 96       	adiw	r30, 0x3f	; 63
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	82 81       	ldd	r24, Z+2	; 0x02
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	4f e7       	ldi	r20, 0x7F	; 127
    1592:	57 e4       	ldi	r21, 0x47	; 71
    1594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1598:	18 16       	cp	r1, r24
    159a:	64 f5       	brge	.+88     	; 0x15f4 <HMI_EnterPassword+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159c:	fe 01       	movw	r30, r28
    159e:	ed 5b       	subi	r30, 0xBD	; 189
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e2       	ldi	r20, 0x20	; 32
    15b0:	51 e4       	ldi	r21, 0x41	; 65
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9e af       	std	Y+62, r25	; 0x3e
    15c8:	8d af       	std	Y+61, r24	; 0x3d
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <HMI_EnterPassword+0x10e>
    15cc:	88 ec       	ldi	r24, 0xC8	; 200
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9c af       	std	Y+60, r25	; 0x3c
    15d2:	8b af       	std	Y+59, r24	; 0x3b
    15d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    15d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <HMI_EnterPassword+0xfc>
    15dc:	9c af       	std	Y+60, r25	; 0x3c
    15de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	9e af       	std	Y+62, r25	; 0x3e
    15e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	69 f7       	brne	.-38     	; 0x15cc <HMI_EnterPassword+0xf0>
    15f2:	16 c0       	rjmp	.+44     	; 0x1620 <HMI_EnterPassword+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f4:	fe 01       	movw	r30, r28
    15f6:	ff 96       	adiw	r30, 0x3f	; 63
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e af       	std	Y+62, r25	; 0x3e
    160a:	8d af       	std	Y+61, r24	; 0x3d
    160c:	8d ad       	ldd	r24, Y+61	; 0x3d
    160e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1610:	9a af       	std	Y+58, r25	; 0x3a
    1612:	89 af       	std	Y+57, r24	; 0x39
    1614:	89 ad       	ldd	r24, Y+57	; 0x39
    1616:	9a ad       	ldd	r25, Y+58	; 0x3a
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <HMI_EnterPassword+0x13c>
    161c:	9a af       	std	Y+58, r25	; 0x3a
    161e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(60);
	LCD_clearScreen();
    1620:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    1624:	80 e6       	ldi	r24, 0x60	; 96
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
	LCD_moveCursor(1,0);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	0e 94 1e 1b 	call	0x363c	; 0x363c <LCD_moveCursor>

	u8_key= KEYPAD_getPressedKey();
    1634:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
    1638:	80 93 2e 01 	sts	0x012E, r24
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e2       	ldi	r26, 0x20	; 32
    1642:	b2 e4       	ldi	r27, 0x42	; 66
    1644:	8d ab       	std	Y+53, r24	; 0x35
    1646:	9e ab       	std	Y+54, r25	; 0x36
    1648:	af ab       	std	Y+55, r26	; 0x37
    164a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6d a9       	ldd	r22, Y+53	; 0x35
    164e:	7e a9       	ldd	r23, Y+54	; 0x36
    1650:	8f a9       	ldd	r24, Y+55	; 0x37
    1652:	98 ad       	ldd	r25, Y+56	; 0x38
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a ef       	ldi	r20, 0xFA	; 250
    165a:	54 e4       	ldi	r21, 0x44	; 68
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	89 ab       	std	Y+49, r24	; 0x31
    1666:	9a ab       	std	Y+50, r25	; 0x32
    1668:	ab ab       	std	Y+51, r26	; 0x33
    166a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    166c:	69 a9       	ldd	r22, Y+49	; 0x31
    166e:	7a a9       	ldd	r23, Y+50	; 0x32
    1670:	8b a9       	ldd	r24, Y+51	; 0x33
    1672:	9c a9       	ldd	r25, Y+52	; 0x34
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <HMI_EnterPassword+0x1b2>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	98 ab       	std	Y+48, r25	; 0x30
    168a:	8f a7       	std	Y+47, r24	; 0x2f
    168c:	3f c0       	rjmp	.+126    	; 0x170c <HMI_EnterPassword+0x230>
	else if (__tmp > 65535)
    168e:	69 a9       	ldd	r22, Y+49	; 0x31
    1690:	7a a9       	ldd	r23, Y+50	; 0x32
    1692:	8b a9       	ldd	r24, Y+51	; 0x33
    1694:	9c a9       	ldd	r25, Y+52	; 0x34
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <HMI_EnterPassword+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6d a9       	ldd	r22, Y+53	; 0x35
    16a8:	7e a9       	ldd	r23, Y+54	; 0x36
    16aa:	8f a9       	ldd	r24, Y+55	; 0x37
    16ac:	98 ad       	ldd	r25, Y+56	; 0x38
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	98 ab       	std	Y+48, r25	; 0x30
    16cc:	8f a7       	std	Y+47, r24	; 0x2f
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <HMI_EnterPassword+0x212>
    16d0:	88 ec       	ldi	r24, 0xC8	; 200
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9e a7       	std	Y+46, r25	; 0x2e
    16d6:	8d a7       	std	Y+45, r24	; 0x2d
    16d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    16da:	9e a5       	ldd	r25, Y+46	; 0x2e
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <HMI_EnterPassword+0x200>
    16e0:	9e a7       	std	Y+46, r25	; 0x2e
    16e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e6:	98 a9       	ldd	r25, Y+48	; 0x30
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	98 ab       	std	Y+48, r25	; 0x30
    16ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f0:	98 a9       	ldd	r25, Y+48	; 0x30
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <HMI_EnterPassword+0x1f4>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <HMI_EnterPassword+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	69 a9       	ldd	r22, Y+49	; 0x31
    16fa:	7a a9       	ldd	r23, Y+50	; 0x32
    16fc:	8b a9       	ldd	r24, Y+51	; 0x33
    16fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	98 ab       	std	Y+48, r25	; 0x30
    170a:	8f a7       	std	Y+47, r24	; 0x2f
    170c:	8f a5       	ldd	r24, Y+47	; 0x2f
    170e:	98 a9       	ldd	r25, Y+48	; 0x30
    1710:	9c a7       	std	Y+44, r25	; 0x2c
    1712:	8b a7       	std	Y+43, r24	; 0x2b
    1714:	8b a5       	ldd	r24, Y+43	; 0x2b
    1716:	9c a5       	ldd	r25, Y+44	; 0x2c
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <HMI_EnterPassword+0x23c>
    171c:	9c a7       	std	Y+44, r25	; 0x2c
    171e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);

	if(u8_key<=9 && u8_key>=0)
    1720:	80 91 2e 01 	lds	r24, 0x012E
    1724:	8a 30       	cpi	r24, 0x0A	; 10
    1726:	08 f0       	brcs	.+2      	; 0x172a <HMI_EnterPassword+0x24e>
    1728:	a2 c0       	rjmp	.+324    	; 0x186e <HMI_EnterPassword+0x392>
	{
		LCD_displayString("*");
    172a:	80 e7       	ldi	r24, 0x70	; 112
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
		Enteredpass[0]= u8_key;
    1732:	80 91 2e 01 	lds	r24, 0x012E
    1736:	fe 01       	movw	r30, r28
    1738:	e7 5b       	subi	r30, 0xB7	; 183
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	01 90       	ld	r0, Z+
    173e:	f0 81       	ld	r31, Z
    1740:	e0 2d       	mov	r30, r0
    1742:	80 83       	st	Z, r24
    1744:	94 c0       	rjmp	.+296    	; 0x186e <HMI_EnterPassword+0x392>
	}

	while(u8_key<=9 && u8_key>=0 && u8_PressNum_1<PASSWORD_LENGTH)
	{
		u8_key= KEYPAD_getPressedKey();
    1746:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
    174a:	80 93 2e 01 	sts	0x012E, r24
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a8 e4       	ldi	r26, 0x48	; 72
    1754:	b2 e4       	ldi	r27, 0x42	; 66
    1756:	8f a3       	std	Y+39, r24	; 0x27
    1758:	98 a7       	std	Y+40, r25	; 0x28
    175a:	a9 a7       	std	Y+41, r26	; 0x29
    175c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175e:	6f a1       	ldd	r22, Y+39	; 0x27
    1760:	78 a5       	ldd	r23, Y+40	; 0x28
    1762:	89 a5       	ldd	r24, Y+41	; 0x29
    1764:	9a a5       	ldd	r25, Y+42	; 0x2a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a ef       	ldi	r20, 0xFA	; 250
    176c:	54 e4       	ldi	r21, 0x44	; 68
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8b a3       	std	Y+35, r24	; 0x23
    1778:	9c a3       	std	Y+36, r25	; 0x24
    177a:	ad a3       	std	Y+37, r26	; 0x25
    177c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    177e:	6b a1       	ldd	r22, Y+35	; 0x23
    1780:	7c a1       	ldd	r23, Y+36	; 0x24
    1782:	8d a1       	ldd	r24, Y+37	; 0x25
    1784:	9e a1       	ldd	r25, Y+38	; 0x26
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1792:	88 23       	and	r24, r24
    1794:	2c f4       	brge	.+10     	; 0x17a0 <HMI_EnterPassword+0x2c4>
		__ticks = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9a a3       	std	Y+34, r25	; 0x22
    179c:	89 a3       	std	Y+33, r24	; 0x21
    179e:	3f c0       	rjmp	.+126    	; 0x181e <HMI_EnterPassword+0x342>
	else if (__tmp > 65535)
    17a0:	6b a1       	ldd	r22, Y+35	; 0x23
    17a2:	7c a1       	ldd	r23, Y+36	; 0x24
    17a4:	8d a1       	ldd	r24, Y+37	; 0x25
    17a6:	9e a1       	ldd	r25, Y+38	; 0x26
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	4c f5       	brge	.+82     	; 0x180a <HMI_EnterPassword+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b8:	6f a1       	ldd	r22, Y+39	; 0x27
    17ba:	78 a5       	ldd	r23, Y+40	; 0x28
    17bc:	89 a5       	ldd	r24, Y+41	; 0x29
    17be:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e2       	ldi	r20, 0x20	; 32
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9a a3       	std	Y+34, r25	; 0x22
    17de:	89 a3       	std	Y+33, r24	; 0x21
    17e0:	0f c0       	rjmp	.+30     	; 0x1800 <HMI_EnterPassword+0x324>
    17e2:	88 ec       	ldi	r24, 0xC8	; 200
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	98 a3       	std	Y+32, r25	; 0x20
    17e8:	8f 8f       	std	Y+31, r24	; 0x1f
    17ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ec:	98 a1       	ldd	r25, Y+32	; 0x20
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <HMI_EnterPassword+0x312>
    17f2:	98 a3       	std	Y+32, r25	; 0x20
    17f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f6:	89 a1       	ldd	r24, Y+33	; 0x21
    17f8:	9a a1       	ldd	r25, Y+34	; 0x22
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	9a a3       	std	Y+34, r25	; 0x22
    17fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	89 a1       	ldd	r24, Y+33	; 0x21
    1802:	9a a1       	ldd	r25, Y+34	; 0x22
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	69 f7       	brne	.-38     	; 0x17e2 <HMI_EnterPassword+0x306>
    1808:	14 c0       	rjmp	.+40     	; 0x1832 <HMI_EnterPassword+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	6b a1       	ldd	r22, Y+35	; 0x23
    180c:	7c a1       	ldd	r23, Y+36	; 0x24
    180e:	8d a1       	ldd	r24, Y+37	; 0x25
    1810:	9e a1       	ldd	r25, Y+38	; 0x26
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9a a3       	std	Y+34, r25	; 0x22
    181c:	89 a3       	std	Y+33, r24	; 0x21
    181e:	89 a1       	ldd	r24, Y+33	; 0x21
    1820:	9a a1       	ldd	r25, Y+34	; 0x22
    1822:	9e 8f       	std	Y+30, r25	; 0x1e
    1824:	8d 8f       	std	Y+29, r24	; 0x1d
    1826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1828:	9e 8d       	ldd	r25, Y+30	; 0x1e
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <HMI_EnterPassword+0x34e>
    182e:	9e 8f       	std	Y+30, r25	; 0x1e
    1830:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		LCD_displayString("*");
    1832:	80 e7       	ldi	r24, 0x70	; 112
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
		Enteredpass[u8_PressNum_1]= u8_key;
    183a:	fe 01       	movw	r30, r28
    183c:	e8 5b       	subi	r30, 0xB8	; 184
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	fe 01       	movw	r30, r28
    1848:	e7 5b       	subi	r30, 0xB7	; 183
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	fc 01       	movw	r30, r24
    1852:	e2 0f       	add	r30, r18
    1854:	f3 1f       	adc	r31, r19
    1856:	80 91 2e 01 	lds	r24, 0x012E
    185a:	80 83       	st	Z, r24
		u8_PressNum_1++;
    185c:	de 01       	movw	r26, r28
    185e:	a8 5b       	subi	r26, 0xB8	; 184
    1860:	bf 4f       	sbci	r27, 0xFF	; 255
    1862:	fe 01       	movw	r30, r28
    1864:	e8 5b       	subi	r30, 0xB8	; 184
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	8f 5f       	subi	r24, 0xFF	; 255
    186c:	8c 93       	st	X, r24
	{
		LCD_displayString("*");
		Enteredpass[0]= u8_key;
	}

	while(u8_key<=9 && u8_key>=0 && u8_PressNum_1<PASSWORD_LENGTH)
    186e:	80 91 2e 01 	lds	r24, 0x012E
    1872:	8a 30       	cpi	r24, 0x0A	; 10
    1874:	38 f4       	brcc	.+14     	; 0x1884 <HMI_EnterPassword+0x3a8>
    1876:	fe 01       	movw	r30, r28
    1878:	e8 5b       	subi	r30, 0xB8	; 184
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	85 30       	cpi	r24, 0x05	; 5
    1880:	08 f4       	brcc	.+2      	; 0x1884 <HMI_EnterPassword+0x3a8>
    1882:	61 cf       	rjmp	.-318    	; 0x1746 <HMI_EnterPassword+0x26a>
		LCD_displayString("*");
		Enteredpass[u8_PressNum_1]= u8_key;
		u8_PressNum_1++;
	}

	u8_key= KEYPAD_getPressedKey();
    1884:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
    1888:	80 93 2e 01 	sts	0x012E, r24
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a8 e4       	ldi	r26, 0x48	; 72
    1892:	b2 e4       	ldi	r27, 0x42	; 66
    1894:	89 8f       	std	Y+25, r24	; 0x19
    1896:	9a 8f       	std	Y+26, r25	; 0x1a
    1898:	ab 8f       	std	Y+27, r26	; 0x1b
    189a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	69 8d       	ldd	r22, Y+25	; 0x19
    189e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a ef       	ldi	r20, 0xFA	; 250
    18aa:	54 e4       	ldi	r21, 0x44	; 68
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8d 8b       	std	Y+21, r24	; 0x15
    18b6:	9e 8b       	std	Y+22, r25	; 0x16
    18b8:	af 8b       	std	Y+23, r26	; 0x17
    18ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18bc:	6d 89       	ldd	r22, Y+21	; 0x15
    18be:	7e 89       	ldd	r23, Y+22	; 0x16
    18c0:	8f 89       	ldd	r24, Y+23	; 0x17
    18c2:	98 8d       	ldd	r25, Y+24	; 0x18
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <HMI_EnterPassword+0x402>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	8b 8b       	std	Y+19, r24	; 0x13
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <HMI_EnterPassword+0x480>
	else if (__tmp > 65535)
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <HMI_EnterPassword+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	69 8d       	ldd	r22, Y+25	; 0x19
    18f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9c 8b       	std	Y+20, r25	; 0x14
    191c:	8b 8b       	std	Y+19, r24	; 0x13
    191e:	0f c0       	rjmp	.+30     	; 0x193e <HMI_EnterPassword+0x462>
    1920:	88 ec       	ldi	r24, 0xC8	; 200
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	9a 89       	ldd	r25, Y+18	; 0x12
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <HMI_EnterPassword+0x450>
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8b 89       	ldd	r24, Y+19	; 0x13
    1936:	9c 89       	ldd	r25, Y+20	; 0x14
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9c 8b       	std	Y+20, r25	; 0x14
    193c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <HMI_EnterPassword+0x444>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <HMI_EnterPassword+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	8b 89       	ldd	r24, Y+19	; 0x13
    195e:	9c 89       	ldd	r25, Y+20	; 0x14
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	8f 87       	std	Y+15, r24	; 0x0f
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	98 89       	ldd	r25, Y+16	; 0x10
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <HMI_EnterPassword+0x48c>
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);

	if(u8_key==ENTER_KEY  && u8_PressNum_1==PASSWORD_LENGTH)
    1970:	80 91 2e 01 	lds	r24, 0x012E
    1974:	8d 33       	cpi	r24, 0x3D	; 61
    1976:	09 f0       	breq	.+2      	; 0x197a <HMI_EnterPassword+0x49e>
    1978:	a9 c0       	rjmp	.+338    	; 0x1acc <HMI_EnterPassword+0x5f0>
    197a:	fe 01       	movw	r30, r28
    197c:	e8 5b       	subi	r30, 0xB8	; 184
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	85 30       	cpi	r24, 0x05	; 5
    1984:	09 f0       	breq	.+2      	; 0x1988 <HMI_EnterPassword+0x4ac>
    1986:	a2 c0       	rjmp	.+324    	; 0x1acc <HMI_EnterPassword+0x5f0>
	{
		LCD_clearScreen();
    1988:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    198c:	fe 01       	movw	r30, r28
    198e:	e9 5b       	subi	r30, 0xB9	; 185
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	10 82       	st	Z, r1
    1994:	94 c0       	rjmp	.+296    	; 0x1abe <HMI_EnterPassword+0x5e2>
		{
			g_Password3[i]=Enteredpass[i];
    1996:	fe 01       	movw	r30, r28
    1998:	e9 5b       	subi	r30, 0xB9	; 185
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	fe 01       	movw	r30, r28
    19a4:	e9 5b       	subi	r30, 0xB9	; 185
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	fe 01       	movw	r30, r28
    19b0:	e7 5b       	subi	r30, 0xB7	; 183
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	fc 01       	movw	r30, r24
    19ba:	e2 0f       	add	r30, r18
    19bc:	f3 1f       	adc	r31, r19
    19be:	80 81       	ld	r24, Z
    19c0:	fa 01       	movw	r30, r20
    19c2:	e1 5d       	subi	r30, 0xD1	; 209
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	80 83       	st	Z, r24
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a8 e4       	ldi	r26, 0x48	; 72
    19ce:	b2 e4       	ldi	r27, 0x42	; 66
    19d0:	8b 87       	std	Y+11, r24	; 0x0b
    19d2:	9c 87       	std	Y+12, r25	; 0x0c
    19d4:	ad 87       	std	Y+13, r26	; 0x0d
    19d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a ef       	ldi	r20, 0xFA	; 250
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8f 83       	std	Y+7, r24	; 0x07
    19f2:	98 87       	std	Y+8, r25	; 0x08
    19f4:	a9 87       	std	Y+9, r26	; 0x09
    19f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f8:	6f 81       	ldd	r22, Y+7	; 0x07
    19fa:	78 85       	ldd	r23, Y+8	; 0x08
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <HMI_EnterPassword+0x53e>
		__ticks = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	3f c0       	rjmp	.+126    	; 0x1a98 <HMI_EnterPassword+0x5bc>
	else if (__tmp > 65535)
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	4c f5       	brge	.+82     	; 0x1a84 <HMI_EnterPassword+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e2       	ldi	r20, 0x20	; 32
    1a40:	51 e4       	ldi	r21, 0x41	; 65
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <HMI_EnterPassword+0x59e>
    1a5c:	88 ec       	ldi	r24, 0xC8	; 200
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <HMI_EnterPassword+0x58c>
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	69 f7       	brne	.-38     	; 0x1a5c <HMI_EnterPassword+0x580>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <HMI_EnterPassword+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <HMI_EnterPassword+0x5c8>
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	if(u8_key==ENTER_KEY  && u8_PressNum_1==PASSWORD_LENGTH)
	{
		LCD_clearScreen();
		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    1aac:	de 01       	movw	r26, r28
    1aae:	a9 5b       	subi	r26, 0xB9	; 185
    1ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 5b       	subi	r30, 0xB9	; 185
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	8c 93       	st	X, r24
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e9 5b       	subi	r30, 0xB9	; 185
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	85 30       	cpi	r24, 0x05	; 5
    1ac8:	08 f4       	brcc	.+2      	; 0x1acc <HMI_EnterPassword+0x5f0>
    1aca:	65 cf       	rjmp	.-310    	; 0x1996 <HMI_EnterPassword+0x4ba>
		{
			g_Password3[i]=Enteredpass[i];
			_delay_ms(50);
		}
	}
}
    1acc:	c6 5b       	subi	r28, 0xB6	; 182
    1ace:	df 4f       	sbci	r29, 0xFF	; 255
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <OpenDoor>:

void OpenDoor(void)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1aec:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
	LCD_displayString("Door is opening");
    1af0:	80 eb       	ldi	r24, 0xB0	; 176
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <main>:

uint8 RecievedPass1[PASSWORD_LENGTH], RecievedPass2[PASSWORD_LENGTH];
uint8 RecieveByte, State, u8_key;

int main()
{
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	c2 56       	subi	r28, 0x62	; 98
    1b0c:	d0 40       	sbci	r29, 0x00	; 0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config ={UART_8_BIT_DATA,UART_ONE_STOP_BIT,UART_NO_PARITY,9600};
    1b18:	ce 01       	movw	r24, r28
    1b1a:	89 5a       	subi	r24, 0xA9	; 169
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	a0 96       	adiw	r28, 0x20	; 32
    1b20:	9f af       	std	Y+63, r25	; 0x3f
    1b22:	8e af       	std	Y+62, r24	; 0x3e
    1b24:	a0 97       	sbiw	r28, 0x20	; 32
    1b26:	84 e0       	ldi	r24, 0x04	; 4
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	a2 96       	adiw	r28, 0x22	; 34
    1b2c:	9f af       	std	Y+63, r25	; 0x3f
    1b2e:	8e af       	std	Y+62, r24	; 0x3e
    1b30:	a2 97       	sbiw	r28, 0x22	; 34
    1b32:	97 e0       	ldi	r25, 0x07	; 7
    1b34:	a3 96       	adiw	r28, 0x23	; 35
    1b36:	9f af       	std	Y+63, r25	; 0x3f
    1b38:	a3 97       	sbiw	r28, 0x23	; 35
    1b3a:	a2 96       	adiw	r28, 0x22	; 34
    1b3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b40:	a2 97       	sbiw	r28, 0x22	; 34
    1b42:	00 80       	ld	r0, Z
    1b44:	a2 96       	adiw	r28, 0x22	; 34
    1b46:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b48:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b4a:	a2 97       	sbiw	r28, 0x22	; 34
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	a2 96       	adiw	r28, 0x22	; 34
    1b50:	9f af       	std	Y+63, r25	; 0x3f
    1b52:	8e af       	std	Y+62, r24	; 0x3e
    1b54:	a2 97       	sbiw	r28, 0x22	; 34
    1b56:	a0 96       	adiw	r28, 0x20	; 32
    1b58:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b5a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b5c:	a0 97       	sbiw	r28, 0x20	; 32
    1b5e:	00 82       	st	Z, r0
    1b60:	a0 96       	adiw	r28, 0x20	; 32
    1b62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b66:	a0 97       	sbiw	r28, 0x20	; 32
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	a0 96       	adiw	r28, 0x20	; 32
    1b6c:	9f af       	std	Y+63, r25	; 0x3f
    1b6e:	8e af       	std	Y+62, r24	; 0x3e
    1b70:	a0 97       	sbiw	r28, 0x20	; 32
    1b72:	a3 96       	adiw	r28, 0x23	; 35
    1b74:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b76:	a3 97       	sbiw	r28, 0x23	; 35
    1b78:	91 50       	subi	r25, 0x01	; 1
    1b7a:	a3 96       	adiw	r28, 0x23	; 35
    1b7c:	9f af       	std	Y+63, r25	; 0x3f
    1b7e:	a3 97       	sbiw	r28, 0x23	; 35
    1b80:	a3 96       	adiw	r28, 0x23	; 35
    1b82:	ef ad       	ldd	r30, Y+63	; 0x3f
    1b84:	a3 97       	sbiw	r28, 0x23	; 35
    1b86:	ee 23       	and	r30, r30
    1b88:	c1 f6       	brne	.-80     	; 0x1b3a <main+0x3c>
	UART_init(&UART_Config);
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	89 5a       	subi	r24, 0xA9	; 169
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	0e 94 a6 1b 	call	0x374c	; 0x374c <UART_init>
	LCD_init();
    1b94:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_init>
	HMI_CreatePassword(g_Password1);
    1b98:	84 e1       	ldi	r24, 0x14	; 20
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_CreatePassword>
	HMI_ConfirmPassword(g_Password2);
    1ba0:	8f e1       	ldi	r24, 0x1F	; 31
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <HMI_ConfirmPassword>
	State = HMI_CheckifPassMatch(g_Password1,g_Password2);
    1ba8:	84 e1       	ldi	r24, 0x14	; 20
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	2f e1       	ldi	r18, 0x1F	; 31
    1bae:	31 e0       	ldi	r19, 0x01	; 1
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	0e 94 23 0a 	call	0x1446	; 0x1446 <HMI_CheckifPassMatch>
    1bb6:	80 93 39 01 	sts	0x0139, r24

	if(State == SUCCESS)
    1bba:	80 91 39 01 	lds	r24, 0x0139
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <main+0xc6>
    1bc2:	7e c3       	rjmp	.+1788   	; 0x22c0 <main+0x7c2>
	{
		LCD_clearScreen();
    1bc4:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
		LCD_moveCursor(0,4);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	64 e0       	ldi	r22, 0x04	; 4
    1bcc:	0e 94 1e 1b 	call	0x363c	; 0x363c <LCD_moveCursor>
		LCD_displayString("Matched!");
    1bd0:	80 ec       	ldi	r24, 0xC0	; 192
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ef 5a       	subi	r30, 0xAF	; 175
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 ea       	ldi	r26, 0xA0	; 160
    1be4:	b1 e4       	ldi	r27, 0x41	; 65
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	8e 01       	movw	r16, r28
    1bf0:	03 5b       	subi	r16, 0xB3	; 179
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ef 5a       	subi	r30, 0xAF	; 175
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a ef       	ldi	r20, 0xFA	; 250
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	f8 01       	movw	r30, r16
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e3 5b       	subi	r30, 0xB3	; 179
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	44 f4       	brge	.+16     	; 0x1c4a <main+0x14c>
		__ticks = 1;
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e5 5b       	subi	r30, 0xB5	; 181
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	64 c0       	rjmp	.+200    	; 0x1d12 <main+0x214>
	else if (__tmp > 65535)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e3 5b       	subi	r30, 0xB3	; 179
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <main+0x16c>
    1c68:	43 c0       	rjmp	.+134    	; 0x1cf0 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ef 5a       	subi	r30, 0xAF	; 175
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e2       	ldi	r20, 0x20	; 32
    1c7e:	51 e4       	ldi	r21, 0x41	; 65
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8e 01       	movw	r16, r28
    1c8a:	05 5b       	subi	r16, 0xB5	; 181
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	1f c0       	rjmp	.+62     	; 0x1ce0 <main+0x1e2>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e7 5b       	subi	r30, 0xB7	; 183
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e7 5b       	subi	r30, 0xB7	; 183
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <main+0x1bc>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e7 5b       	subi	r30, 0xB7	; 183
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	de 01       	movw	r26, r28
    1cca:	a5 5b       	subi	r26, 0xB5	; 181
    1ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 5b       	subi	r30, 0xB5	; 181
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	11 96       	adiw	r26, 0x01	; 1
    1cdc:	9c 93       	st	X, r25
    1cde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e5 5b       	subi	r30, 0xB5	; 181
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	d1 f6       	brne	.-76     	; 0x1ca2 <main+0x1a4>
    1cee:	28 c0       	rjmp	.+80     	; 0x1d40 <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	05 5b       	subi	r16, 0xB5	; 181
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e3 5b       	subi	r30, 0xB3	; 179
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
    1d12:	de 01       	movw	r26, r28
    1d14:	a9 5b       	subi	r26, 0xB9	; 185
    1d16:	bf 4f       	sbci	r27, 0xFF	; 255
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e5 5b       	subi	r30, 0xB5	; 181
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	9c 93       	st	X, r25
    1d26:	8e 93       	st	-X, r24
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5b       	subi	r30, 0xB9	; 185
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <main+0x234>
    1d36:	fe 01       	movw	r30, r28
    1d38:	e9 5b       	subi	r30, 0xB9	; 185
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
		_delay_ms(20);

		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    1d40:	fe 01       	movw	r30, r28
    1d42:	ea 5a       	subi	r30, 0xAA	; 170
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	10 82       	st	Z, r1
    1d48:	9a c0       	rjmp	.+308    	; 0x1e7e <main+0x380>
		{
			UART_sendByte(g_Password1[i]);
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ea 5a       	subi	r30, 0xAA	; 170
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	fc 01       	movw	r30, r24
    1d58:	ec 5e       	subi	r30, 0xEC	; 236
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	80 81       	ld	r24, Z
    1d5e:	0e 94 23 1c 	call	0x3846	; 0x3846 <UART_sendByte>
    1d62:	fe 01       	movw	r30, r28
    1d64:	ed 5b       	subi	r30, 0xBD	; 189
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1d6e:	b1 e4       	ldi	r27, 0x41	; 65
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	8e 01       	movw	r16, r28
    1d7a:	01 5c       	subi	r16, 0xC1	; 193
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ed 5b       	subi	r30, 0xBD	; 189
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a ef       	ldi	r20, 0xFA	; 250
    1d92:	54 e4       	ldi	r21, 0x44	; 68
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 83       	st	Z, r24
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	a2 83       	std	Z+2, r26	; 0x02
    1da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da6:	fe 01       	movw	r30, r28
    1da8:	ff 96       	adiw	r30, 0x3f	; 63
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <main+0x2ce>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9e af       	std	Y+62, r25	; 0x3e
    1dc8:	8d af       	std	Y+61, r24	; 0x3d
    1dca:	46 c0       	rjmp	.+140    	; 0x1e58 <main+0x35a>
	else if (__tmp > 65535)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ff 96       	adiw	r30, 0x3f	; 63
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	64 f5       	brge	.+88     	; 0x1e40 <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	fe 01       	movw	r30, r28
    1dea:	ed 5b       	subi	r30, 0xBD	; 189
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e af       	std	Y+62, r25	; 0x3e
    1e14:	8d af       	std	Y+61, r24	; 0x3d
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <main+0x338>
    1e18:	88 ec       	ldi	r24, 0xC8	; 200
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c af       	std	Y+60, r25	; 0x3c
    1e1e:	8b af       	std	Y+59, r24	; 0x3b
    1e20:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e22:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <main+0x326>
    1e28:	9c af       	std	Y+60, r25	; 0x3c
    1e2a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9e af       	std	Y+62, r25	; 0x3e
    1e34:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <main+0x31a>
    1e3e:	16 c0       	rjmp	.+44     	; 0x1e6c <main+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	fe 01       	movw	r30, r28
    1e42:	ff 96       	adiw	r30, 0x3f	; 63
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e af       	std	Y+62, r25	; 0x3e
    1e56:	8d af       	std	Y+61, r24	; 0x3d
    1e58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5c:	9a af       	std	Y+58, r25	; 0x3a
    1e5e:	89 af       	std	Y+57, r24	; 0x39
    1e60:	89 ad       	ldd	r24, Y+57	; 0x39
    1e62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <main+0x366>
    1e68:	9a af       	std	Y+58, r25	; 0x3a
    1e6a:	89 af       	std	Y+57, r24	; 0x39
		LCD_clearScreen();
		LCD_moveCursor(0,4);
		LCD_displayString("Matched!");
		_delay_ms(20);

		for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    1e6c:	de 01       	movw	r26, r28
    1e6e:	aa 5a       	subi	r26, 0xAA	; 170
    1e70:	bf 4f       	sbci	r27, 0xFF	; 255
    1e72:	fe 01       	movw	r30, r28
    1e74:	ea 5a       	subi	r30, 0xAA	; 170
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	8c 93       	st	X, r24
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ea 5a       	subi	r30, 0xAA	; 170
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	85 30       	cpi	r24, 0x05	; 5
    1e88:	08 f4       	brcc	.+2      	; 0x1e8c <main+0x38e>
    1e8a:	5f cf       	rjmp	.-322    	; 0x1d4a <main+0x24c>
		{
			UART_sendByte(g_Password1[i]);
			_delay_ms(20);
		}
		HMI_MainOptions();
    1e8c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <HMI_MainOptions>

		u8_key= KEYPAD_getPressedKey();
    1e90:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <KEYPAD_getPressedKey>
    1e94:	80 93 2e 01 	sts	0x012E, r24
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e9e:	b1 e4       	ldi	r27, 0x41	; 65
    1ea0:	8d ab       	std	Y+53, r24	; 0x35
    1ea2:	9e ab       	std	Y+54, r25	; 0x36
    1ea4:	af ab       	std	Y+55, r26	; 0x37
    1ea6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1eac:	8f a9       	ldd	r24, Y+55	; 0x37
    1eae:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	89 ab       	std	Y+49, r24	; 0x31
    1ec2:	9a ab       	std	Y+50, r25	; 0x32
    1ec4:	ab ab       	std	Y+51, r26	; 0x33
    1ec6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ecc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ece:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <main+0x3ec>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <main+0x46a>
	else if (__tmp > 65535)
    1eea:	69 a9       	ldd	r22, Y+49	; 0x31
    1eec:	7a a9       	ldd	r23, Y+50	; 0x32
    1eee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6d a9       	ldd	r22, Y+53	; 0x35
    1f04:	7e a9       	ldd	r23, Y+54	; 0x36
    1f06:	8f a9       	ldd	r24, Y+55	; 0x37
    1f08:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	98 ab       	std	Y+48, r25	; 0x30
    1f28:	8f a7       	std	Y+47, r24	; 0x2f
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <main+0x44c>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9e a7       	std	Y+46, r25	; 0x2e
    1f32:	8d a7       	std	Y+45, r24	; 0x2d
    1f34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <main+0x43a>
    1f3c:	9e a7       	std	Y+46, r25	; 0x2e
    1f3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f42:	98 a9       	ldd	r25, Y+48	; 0x30
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <main+0x42e>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	69 a9       	ldd	r22, Y+49	; 0x31
    1f56:	7a a9       	ldd	r23, Y+50	; 0x32
    1f58:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	98 ab       	std	Y+48, r25	; 0x30
    1f66:	8f a7       	std	Y+47, r24	; 0x2f
    1f68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6c:	9c a7       	std	Y+44, r25	; 0x2c
    1f6e:	8b a7       	std	Y+43, r24	; 0x2b
    1f70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <main+0x476>
    1f78:	9c a7       	std	Y+44, r25	; 0x2c
    1f7a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		switch(u8_key)
    1f7c:	80 91 2e 01 	lds	r24, 0x012E
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	8b 32       	cpi	r24, 0x2B	; 43
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <main+0x48e>
    1f8a:	99 c1       	rjmp	.+818    	; 0x22be <main+0x7c0>
		{
		case '+':
			LCD_clearScreen();
    1f8c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
			HMI_EnterPassword(g_Password3);
    1f90:	8f e2       	ldi	r24, 0x2F	; 47
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <HMI_EnterPassword>

			for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    1f98:	fe 01       	movw	r30, r28
    1f9a:	eb 5a       	subi	r30, 0xAB	; 171
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	10 82       	st	Z, r1
    1fa0:	87 c0       	rjmp	.+270    	; 0x20b0 <main+0x5b2>
			{
				UART_sendByte(g_Password3[i]);
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	eb 5a       	subi	r30, 0xAB	; 171
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e1 5d       	subi	r30, 0xD1	; 209
    1fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb4:	80 81       	ld	r24, Z
    1fb6:	0e 94 23 1c 	call	0x3846	; 0x3846 <UART_sendByte>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc0:	b1 e4       	ldi	r27, 0x41	; 65
    1fc2:	8f a3       	std	Y+39, r24	; 0x27
    1fc4:	98 a7       	std	Y+40, r25	; 0x28
    1fc6:	a9 a7       	std	Y+41, r26	; 0x29
    1fc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	6f a1       	ldd	r22, Y+39	; 0x27
    1fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fce:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8b a3       	std	Y+35, r24	; 0x23
    1fe4:	9c a3       	std	Y+36, r25	; 0x24
    1fe6:	ad a3       	std	Y+37, r26	; 0x25
    1fe8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fea:	6b a1       	ldd	r22, Y+35	; 0x23
    1fec:	7c a1       	ldd	r23, Y+36	; 0x24
    1fee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <main+0x50e>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9a a3       	std	Y+34, r25	; 0x22
    2008:	89 a3       	std	Y+33, r24	; 0x21
    200a:	3f c0       	rjmp	.+126    	; 0x208a <main+0x58c>
	else if (__tmp > 65535)
    200c:	6b a1       	ldd	r22, Y+35	; 0x23
    200e:	7c a1       	ldd	r23, Y+36	; 0x24
    2010:	8d a1       	ldd	r24, Y+37	; 0x25
    2012:	9e a1       	ldd	r25, Y+38	; 0x26
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <main+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	6f a1       	ldd	r22, Y+39	; 0x27
    2026:	78 a5       	ldd	r23, Y+40	; 0x28
    2028:	89 a5       	ldd	r24, Y+41	; 0x29
    202a:	9a a5       	ldd	r25, Y+42	; 0x2a
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9a a3       	std	Y+34, r25	; 0x22
    204a:	89 a3       	std	Y+33, r24	; 0x21
    204c:	0f c0       	rjmp	.+30     	; 0x206c <main+0x56e>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	98 a3       	std	Y+32, r25	; 0x20
    2054:	8f 8f       	std	Y+31, r24	; 0x1f
    2056:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2058:	98 a1       	ldd	r25, Y+32	; 0x20
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <main+0x55c>
    205e:	98 a3       	std	Y+32, r25	; 0x20
    2060:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	89 a1       	ldd	r24, Y+33	; 0x21
    2064:	9a a1       	ldd	r25, Y+34	; 0x22
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9a a3       	std	Y+34, r25	; 0x22
    206a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	89 a1       	ldd	r24, Y+33	; 0x21
    206e:	9a a1       	ldd	r25, Y+34	; 0x22
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <main+0x550>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6b a1       	ldd	r22, Y+35	; 0x23
    2078:	7c a1       	ldd	r23, Y+36	; 0x24
    207a:	8d a1       	ldd	r24, Y+37	; 0x25
    207c:	9e a1       	ldd	r25, Y+38	; 0x26
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	89 a1       	ldd	r24, Y+33	; 0x21
    208c:	9a a1       	ldd	r25, Y+34	; 0x22
    208e:	9e 8f       	std	Y+30, r25	; 0x1e
    2090:	8d 8f       	std	Y+29, r24	; 0x1d
    2092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2094:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <main+0x598>
    209a:	9e 8f       	std	Y+30, r25	; 0x1e
    209c:	8d 8f       	std	Y+29, r24	; 0x1d
		{
		case '+':
			LCD_clearScreen();
			HMI_EnterPassword(g_Password3);

			for (uint8 i=0;i<PASSWORD_LENGTH;i++)
    209e:	de 01       	movw	r26, r28
    20a0:	ab 5a       	subi	r26, 0xAB	; 171
    20a2:	bf 4f       	sbci	r27, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	eb 5a       	subi	r30, 0xAB	; 171
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	8c 93       	st	X, r24
    20b0:	fe 01       	movw	r30, r28
    20b2:	eb 5a       	subi	r30, 0xAB	; 171
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	85 30       	cpi	r24, 0x05	; 5
    20ba:	08 f4       	brcc	.+2      	; 0x20be <main+0x5c0>
    20bc:	72 cf       	rjmp	.-284    	; 0x1fa2 <main+0x4a4>
			{
				UART_sendByte(g_Password3[i]);
				_delay_ms(20);
			}

			if(HMI_CheckifPassMatch(g_Password2,g_Password3)==SUCCESS)
    20be:	8f e1       	ldi	r24, 0x1F	; 31
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	2f e2       	ldi	r18, 0x2F	; 47
    20c4:	31 e0       	ldi	r19, 0x01	; 1
    20c6:	b9 01       	movw	r22, r18
    20c8:	0e 94 23 0a 	call	0x1446	; 0x1446 <HMI_CheckifPassMatch>
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	39 f4       	brne	.+14     	; 0x20de <main+0x5e0>
			{
				LCD_clearScreen();
    20d0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
				LCD_displayString("Door is opening");
    20d4:	89 ec       	ldi	r24, 0xC9	; 201
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
    20dc:	f0 c0       	rjmp	.+480    	; 0x22be <main+0x7c0>
			}
			else
			{
				LCD_clearScreen();
    20de:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
				LCD_displayString("Wrong Pass");
    20e2:	89 ed       	ldi	r24, 0xD9	; 217
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a8 e4       	ldi	r26, 0x48	; 72
    20f0:	b2 e4       	ldi	r27, 0x42	; 66
    20f2:	89 8f       	std	Y+25, r24	; 0x19
    20f4:	9a 8f       	std	Y+26, r25	; 0x1a
    20f6:	ab 8f       	std	Y+27, r26	; 0x1b
    20f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8d 8b       	std	Y+21, r24	; 0x15
    2114:	9e 8b       	std	Y+22, r25	; 0x16
    2116:	af 8b       	std	Y+23, r26	; 0x17
    2118:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <main+0x63e>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <main+0x6bc>
	else if (__tmp > 65535)
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <main+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	0f c0       	rjmp	.+30     	; 0x219c <main+0x69e>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a 8b       	std	Y+18, r25	; 0x12
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	89 89       	ldd	r24, Y+17	; 0x11
    2188:	9a 89       	ldd	r25, Y+18	; 0x12
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <main+0x68c>
    218e:	9a 8b       	std	Y+18, r25	; 0x12
    2190:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <main+0x680>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <main+0x6d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	98 8b       	std	Y+16, r25	; 0x10
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	98 89       	ldd	r25, Y+16	; 0x10
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <main+0x6c8>
    21ca:	98 8b       	std	Y+16, r25	; 0x10
    21cc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				LCD_clearScreen();
    21ce:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
				LCD_displayString("Try again!");
    21d2:	84 ee       	ldi	r24, 0xE4	; 228
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a8 e4       	ldi	r26, 0x48	; 72
    21e0:	b2 e4       	ldi	r27, 0x42	; 66
    21e2:	8b 87       	std	Y+11, r24	; 0x0b
    21e4:	9c 87       	std	Y+12, r25	; 0x0c
    21e6:	ad 87       	std	Y+13, r26	; 0x0d
    21e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a ef       	ldi	r20, 0xFA	; 250
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8f 83       	std	Y+7, r24	; 0x07
    2204:	98 87       	std	Y+8, r25	; 0x08
    2206:	a9 87       	std	Y+9, r26	; 0x09
    2208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <main+0x72e>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <main+0x7ac>
	else if (__tmp > 65535)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <main+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	0f c0       	rjmp	.+30     	; 0x228c <main+0x78e>
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <main+0x77c>
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <main+0x770>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <main+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <main+0x7b8>
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <main+0x7ce>
			break;
		}
	}
	else
	{
		LCD_clearScreen();
    22c0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_clearScreen>
		LCD_displayString("Not Matched!");
    22c4:	8f ee       	ldi	r24, 0xEF	; 239
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
    22cc:	ff cf       	rjmp	.-2      	; 0x22cc <main+0x7ce>

000022ce <__vector_7>:
 
 /*Channel A*/
#if TIMER1_CHANNEL_NUM==0

ISR(TIMER1_COMPA_vect)
{
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	2f 93       	push	r18
    22da:	3f 93       	push	r19
    22dc:	4f 93       	push	r20
    22de:	5f 93       	push	r21
    22e0:	6f 93       	push	r22
    22e2:	7f 93       	push	r23
    22e4:	8f 93       	push	r24
    22e6:	9f 93       	push	r25
    22e8:	af 93       	push	r26
    22ea:	bf 93       	push	r27
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    22f8:	80 91 0d 01 	lds	r24, 0x010D
    22fc:	90 91 0e 01 	lds	r25, 0x010E
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	29 f0       	breq	.+10     	; 0x230e <__vector_7+0x40>
	{
		(*g_callBackPtr)(); 
    2304:	e0 91 0d 01 	lds	r30, 0x010D
    2308:	f0 91 0e 01 	lds	r31, 0x010E
    230c:	09 95       	icall
	}
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <Timer1_init>:
 /*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
 
 void Timer1_init(const Timer1_ConfigType * Config_Ptr)
 {
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <Timer1_init+0x6>
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	/*Prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr -> prescaler) & 0x07);
    2342:	ae e4       	ldi	r26, 0x4E	; 78
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	ee e4       	ldi	r30, 0x4E	; 78
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	98 2f       	mov	r25, r24
    234e:	98 7f       	andi	r25, 0xF8	; 248
    2350:	e9 81       	ldd	r30, Y+1	; 0x01
    2352:	fa 81       	ldd	r31, Y+2	; 0x02
    2354:	84 81       	ldd	r24, Z+4	; 0x04
    2356:	87 70       	andi	r24, 0x07	; 7
    2358:	89 2b       	or	r24, r25
    235a:	8c 93       	st	X, r24
	
	TCNT1= Config_Ptr-> initial_value;
    235c:	ac e4       	ldi	r26, 0x4C	; 76
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e9 81       	ldd	r30, Y+1	; 0x01
    2362:	fa 81       	ldd	r31, Y+2	; 0x02
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	11 96       	adiw	r26, 0x01	; 1
    236a:	9c 93       	st	X, r25
    236c:	8e 93       	st	-X, r24
	
	if(Config_Ptr -> mode == TIMER1_CMP)
    236e:	e9 81       	ldd	r30, Y+1	; 0x01
    2370:	fa 81       	ldd	r31, Y+2	; 0x02
    2372:	85 81       	ldd	r24, Z+5	; 0x05
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	b1 f5       	brne	.+108    	; 0x23e4 <Timer1_init+0xb0>
	{
		if(TIMER1_CHANNEL_NUM==0)
		{
			SET_BIT(TCCR1B, WGM12);
    2378:	ae e4       	ldi	r26, 0x4E	; 78
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ee e4       	ldi	r30, 0x4E	; 78
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	88 60       	ori	r24, 0x08	; 8
    2384:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE1A);
    2386:	a9 e5       	ldi	r26, 0x59	; 89
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e9 e5       	ldi	r30, 0x59	; 89
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 61       	ori	r24, 0x10	; 16
    2392:	8c 93       	st	X, r24
			TCCR1A = (TCCR1A & 0x0F) | ((Config_Ptr -> mode) << 6);
    2394:	af e4       	ldi	r26, 0x4F	; 79
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ef e4       	ldi	r30, 0x4F	; 79
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	28 2f       	mov	r18, r24
    23a0:	2f 70       	andi	r18, 0x0F	; 15
    23a2:	e9 81       	ldd	r30, Y+1	; 0x01
    23a4:	fa 81       	ldd	r31, Y+2	; 0x02
    23a6:	85 81       	ldd	r24, Z+5	; 0x05
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	00 24       	eor	r0, r0
    23ae:	96 95       	lsr	r25
    23b0:	87 95       	ror	r24
    23b2:	07 94       	ror	r0
    23b4:	96 95       	lsr	r25
    23b6:	87 95       	ror	r24
    23b8:	07 94       	ror	r0
    23ba:	98 2f       	mov	r25, r24
    23bc:	80 2d       	mov	r24, r0
    23be:	82 2b       	or	r24, r18
    23c0:	8c 93       	st	X, r24
			OCR1A= Config_Ptr-> compare_value;
    23c2:	aa e4       	ldi	r26, 0x4A	; 74
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e9 81       	ldd	r30, Y+1	; 0x01
    23c8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	9c 93       	st	X, r25
    23d2:	8e 93       	st	-X, r24
			SET_BIT(TCCR1A,FOC1A);
    23d4:	af e4       	ldi	r26, 0x4F	; 79
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	ef e4       	ldi	r30, 0x4F	; 79
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	88 60       	ori	r24, 0x08	; 8
    23e0:	8c 93       	st	X, r24
    23e2:	0c c0       	rjmp	.+24     	; 0x23fc <Timer1_init+0xc8>
			OCR1B= Config_Ptr-> mode;
			SET_BIT(TCCR1A, FOC1B);
		}
	}
	
	else if(Config_Ptr -> mode == TIMER1_OVF)
    23e4:	e9 81       	ldd	r30, Y+1	; 0x01
    23e6:	fa 81       	ldd	r31, Y+2	; 0x02
    23e8:	85 81       	ldd	r24, Z+5	; 0x05
    23ea:	88 23       	and	r24, r24
    23ec:	39 f4       	brne	.+14     	; 0x23fc <Timer1_init+0xc8>
	{
		SET_BIT(TIMSK, TOIE1);
    23ee:	a9 e5       	ldi	r26, 0x59	; 89
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e9 e5       	ldi	r30, 0x59	; 89
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	84 60       	ori	r24, 0x04	; 4
    23fa:	8c 93       	st	X, r24
	}
	
	
 }
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <Timer1_deInit>:
 void Timer1_deInit(void)
 {
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCNT1 = 0;
    240e:	ec e4       	ldi	r30, 0x4C	; 76
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	11 82       	std	Z+1, r1	; 0x01
    2414:	10 82       	st	Z, r1
	OCR1A = 0 ;
    2416:	ea e4       	ldi	r30, 0x4A	; 74
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	11 82       	std	Z+1, r1	; 0x01
    241c:	10 82       	st	Z, r1
	OCR1B = 0 ;
    241e:	e8 e4       	ldi	r30, 0x48	; 72
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	11 82       	std	Z+1, r1	; 0x01
    2424:	10 82       	st	Z, r1
	TCCR1A = 0;
    2426:	ef e4       	ldi	r30, 0x4F	; 79
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	10 82       	st	Z, r1
	TCCR1B = 0;
    242c:	ee e4       	ldi	r30, 0x4E	; 78
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	10 82       	st	Z, r1
 }
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <Timer1_setCallBack>:
 void Timer1_setCallBack(void(*a_ptr)(void))
 {
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <Timer1_setCallBack+0x6>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr; 
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	90 93 0e 01 	sts	0x010E, r25
    244e:	80 93 0d 01 	sts	0x010D, r24
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	00 d0       	rcall	.+0      	; 0x2462 <GPIO_setupPinDirection+0x6>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <GPIO_setupPinDirection+0x8>
    2464:	0f 92       	push	r0
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	6a 83       	std	Y+2, r22	; 0x02
    246e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	88 30       	cpi	r24, 0x08	; 8
    2474:	08 f0       	brcs	.+2      	; 0x2478 <GPIO_setupPinDirection+0x1c>
    2476:	d5 c0       	rjmp	.+426    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	84 30       	cpi	r24, 0x04	; 4
    247c:	08 f0       	brcs	.+2      	; 0x2480 <GPIO_setupPinDirection+0x24>
    247e:	d1 c0       	rjmp	.+418    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3d 83       	std	Y+5, r19	; 0x05
    2488:	2c 83       	std	Y+4, r18	; 0x04
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	9d 81       	ldd	r25, Y+5	; 0x05
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	09 f4       	brne	.+2      	; 0x2496 <GPIO_setupPinDirection+0x3a>
    2494:	43 c0       	rjmp	.+134    	; 0x251c <GPIO_setupPinDirection+0xc0>
    2496:	2c 81       	ldd	r18, Y+4	; 0x04
    2498:	3d 81       	ldd	r19, Y+5	; 0x05
    249a:	22 30       	cpi	r18, 0x02	; 2
    249c:	31 05       	cpc	r19, r1
    249e:	2c f4       	brge	.+10     	; 0x24aa <GPIO_setupPinDirection+0x4e>
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	71 f0       	breq	.+28     	; 0x24c4 <GPIO_setupPinDirection+0x68>
    24a8:	bc c0       	rjmp	.+376    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
    24aa:	2c 81       	ldd	r18, Y+4	; 0x04
    24ac:	3d 81       	ldd	r19, Y+5	; 0x05
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <GPIO_setupPinDirection+0x5a>
    24b4:	5f c0       	rjmp	.+190    	; 0x2574 <GPIO_setupPinDirection+0x118>
    24b6:	8c 81       	ldd	r24, Y+4	; 0x04
    24b8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ba:	83 30       	cpi	r24, 0x03	; 3
    24bc:	91 05       	cpc	r25, r1
    24be:	09 f4       	brne	.+2      	; 0x24c2 <GPIO_setupPinDirection+0x66>
    24c0:	85 c0       	rjmp	.+266    	; 0x25cc <GPIO_setupPinDirection+0x170>
    24c2:	af c0       	rjmp	.+350    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	a1 f4       	brne	.+40     	; 0x24f2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    24ca:	aa e3       	ldi	r26, 0x3A	; 58
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	ea e3       	ldi	r30, 0x3A	; 58
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	48 2f       	mov	r20, r24
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	02 2e       	mov	r0, r18
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <GPIO_setupPinDirection+0x8c>
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	0a 94       	dec	r0
    24ea:	e2 f7       	brpl	.-8      	; 0x24e4 <GPIO_setupPinDirection+0x88>
    24ec:	84 2b       	or	r24, r20
    24ee:	8c 93       	st	X, r24
    24f0:	98 c0       	rjmp	.+304    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    24f2:	aa e3       	ldi	r26, 0x3A	; 58
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ea e3       	ldi	r30, 0x3A	; 58
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <GPIO_setupPinDirection+0xb4>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <GPIO_setupPinDirection+0xb0>
    2514:	80 95       	com	r24
    2516:	84 23       	and	r24, r20
    2518:	8c 93       	st	X, r24
    251a:	83 c0       	rjmp	.+262    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	a1 f4       	brne	.+40     	; 0x254a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2522:	a7 e3       	ldi	r26, 0x37	; 55
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e7 e3       	ldi	r30, 0x37	; 55
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <GPIO_setupPinDirection+0xe4>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <GPIO_setupPinDirection+0xe0>
    2544:	84 2b       	or	r24, r20
    2546:	8c 93       	st	X, r24
    2548:	6c c0       	rjmp	.+216    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    254a:	a7 e3       	ldi	r26, 0x37	; 55
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e7 e3       	ldi	r30, 0x37	; 55
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <GPIO_setupPinDirection+0x10c>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <GPIO_setupPinDirection+0x108>
    256c:	80 95       	com	r24
    256e:	84 23       	and	r24, r20
    2570:	8c 93       	st	X, r24
    2572:	57 c0       	rjmp	.+174    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	a1 f4       	brne	.+40     	; 0x25a2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    257a:	a4 e3       	ldi	r26, 0x34	; 52
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e4 e3       	ldi	r30, 0x34	; 52
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	48 2f       	mov	r20, r24
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <GPIO_setupPinDirection+0x13c>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <GPIO_setupPinDirection+0x138>
    259c:	84 2b       	or	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	40 c0       	rjmp	.+128    	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    25a2:	a4 e3       	ldi	r26, 0x34	; 52
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e4 e3       	ldi	r30, 0x34	; 52
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <GPIO_setupPinDirection+0x164>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <GPIO_setupPinDirection+0x160>
    25c4:	80 95       	com	r24
    25c6:	84 23       	and	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	2b c0       	rjmp	.+86     	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	a1 f4       	brne	.+40     	; 0x25fa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    25d2:	a1 e3       	ldi	r26, 0x31	; 49
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e1 e3       	ldi	r30, 0x31	; 49
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <GPIO_setupPinDirection+0x194>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <GPIO_setupPinDirection+0x190>
    25f4:	84 2b       	or	r24, r20
    25f6:	8c 93       	st	X, r24
    25f8:	14 c0       	rjmp	.+40     	; 0x2622 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    25fa:	a1 e3       	ldi	r26, 0x31	; 49
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e1 e3       	ldi	r30, 0x31	; 49
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	48 2f       	mov	r20, r24
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	02 2e       	mov	r0, r18
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <GPIO_setupPinDirection+0x1bc>
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	0a 94       	dec	r0
    261a:	e2 f7       	brpl	.-8      	; 0x2614 <GPIO_setupPinDirection+0x1b8>
    261c:	80 95       	com	r24
    261e:	84 23       	and	r24, r20
    2620:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <GPIO_writePin+0x6>
    2638:	00 d0       	rcall	.+0      	; 0x263a <GPIO_writePin+0x8>
    263a:	0f 92       	push	r0
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	6a 83       	std	Y+2, r22	; 0x02
    2644:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	88 30       	cpi	r24, 0x08	; 8
    264a:	08 f0       	brcs	.+2      	; 0x264e <GPIO_writePin+0x1c>
    264c:	d5 c0       	rjmp	.+426    	; 0x27f8 <GPIO_writePin+0x1c6>
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	84 30       	cpi	r24, 0x04	; 4
    2652:	08 f0       	brcs	.+2      	; 0x2656 <GPIO_writePin+0x24>
    2654:	d1 c0       	rjmp	.+418    	; 0x27f8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	3d 83       	std	Y+5, r19	; 0x05
    265e:	2c 83       	std	Y+4, r18	; 0x04
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	9d 81       	ldd	r25, Y+5	; 0x05
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	91 05       	cpc	r25, r1
    2668:	09 f4       	brne	.+2      	; 0x266c <GPIO_writePin+0x3a>
    266a:	43 c0       	rjmp	.+134    	; 0x26f2 <GPIO_writePin+0xc0>
    266c:	2c 81       	ldd	r18, Y+4	; 0x04
    266e:	3d 81       	ldd	r19, Y+5	; 0x05
    2670:	22 30       	cpi	r18, 0x02	; 2
    2672:	31 05       	cpc	r19, r1
    2674:	2c f4       	brge	.+10     	; 0x2680 <GPIO_writePin+0x4e>
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
    2678:	9d 81       	ldd	r25, Y+5	; 0x05
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	71 f0       	breq	.+28     	; 0x269a <GPIO_writePin+0x68>
    267e:	bc c0       	rjmp	.+376    	; 0x27f8 <GPIO_writePin+0x1c6>
    2680:	2c 81       	ldd	r18, Y+4	; 0x04
    2682:	3d 81       	ldd	r19, Y+5	; 0x05
    2684:	22 30       	cpi	r18, 0x02	; 2
    2686:	31 05       	cpc	r19, r1
    2688:	09 f4       	brne	.+2      	; 0x268c <GPIO_writePin+0x5a>
    268a:	5f c0       	rjmp	.+190    	; 0x274a <GPIO_writePin+0x118>
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	9d 81       	ldd	r25, Y+5	; 0x05
    2690:	83 30       	cpi	r24, 0x03	; 3
    2692:	91 05       	cpc	r25, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <GPIO_writePin+0x66>
    2696:	85 c0       	rjmp	.+266    	; 0x27a2 <GPIO_writePin+0x170>
    2698:	af c0       	rjmp	.+350    	; 0x27f8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	a1 f4       	brne	.+40     	; 0x26c8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    26a0:	ab e3       	ldi	r26, 0x3B	; 59
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	eb e3       	ldi	r30, 0x3B	; 59
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	48 2f       	mov	r20, r24
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	02 2e       	mov	r0, r18
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <GPIO_writePin+0x8c>
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	0a 94       	dec	r0
    26c0:	e2 f7       	brpl	.-8      	; 0x26ba <GPIO_writePin+0x88>
    26c2:	84 2b       	or	r24, r20
    26c4:	8c 93       	st	X, r24
    26c6:	98 c0       	rjmp	.+304    	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    26c8:	ab e3       	ldi	r26, 0x3B	; 59
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	eb e3       	ldi	r30, 0x3B	; 59
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	48 2f       	mov	r20, r24
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	02 2e       	mov	r0, r18
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <GPIO_writePin+0xb4>
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	0a 94       	dec	r0
    26e8:	e2 f7       	brpl	.-8      	; 0x26e2 <GPIO_writePin+0xb0>
    26ea:	80 95       	com	r24
    26ec:	84 23       	and	r24, r20
    26ee:	8c 93       	st	X, r24
    26f0:	83 c0       	rjmp	.+262    	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	81 30       	cpi	r24, 0x01	; 1
    26f6:	a1 f4       	brne	.+40     	; 0x2720 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    26f8:	a8 e3       	ldi	r26, 0x38	; 56
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e8 e3       	ldi	r30, 0x38	; 56
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	48 2f       	mov	r20, r24
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <GPIO_writePin+0xe4>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <GPIO_writePin+0xe0>
    271a:	84 2b       	or	r24, r20
    271c:	8c 93       	st	X, r24
    271e:	6c c0       	rjmp	.+216    	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2720:	a8 e3       	ldi	r26, 0x38	; 56
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e8 e3       	ldi	r30, 0x38	; 56
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	48 2f       	mov	r20, r24
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 2e       	mov	r0, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <GPIO_writePin+0x10c>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	0a 94       	dec	r0
    2740:	e2 f7       	brpl	.-8      	; 0x273a <GPIO_writePin+0x108>
    2742:	80 95       	com	r24
    2744:	84 23       	and	r24, r20
    2746:	8c 93       	st	X, r24
    2748:	57 c0       	rjmp	.+174    	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	a1 f4       	brne	.+40     	; 0x2778 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2750:	a5 e3       	ldi	r26, 0x35	; 53
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e5 e3       	ldi	r30, 0x35	; 53
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	48 2f       	mov	r20, r24
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	02 2e       	mov	r0, r18
    2768:	02 c0       	rjmp	.+4      	; 0x276e <GPIO_writePin+0x13c>
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	0a 94       	dec	r0
    2770:	e2 f7       	brpl	.-8      	; 0x276a <GPIO_writePin+0x138>
    2772:	84 2b       	or	r24, r20
    2774:	8c 93       	st	X, r24
    2776:	40 c0       	rjmp	.+128    	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2778:	a5 e3       	ldi	r26, 0x35	; 53
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e5 e3       	ldi	r30, 0x35	; 53
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	48 2f       	mov	r20, r24
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	02 2e       	mov	r0, r18
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <GPIO_writePin+0x164>
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	0a 94       	dec	r0
    2798:	e2 f7       	brpl	.-8      	; 0x2792 <GPIO_writePin+0x160>
    279a:	80 95       	com	r24
    279c:	84 23       	and	r24, r20
    279e:	8c 93       	st	X, r24
    27a0:	2b c0       	rjmp	.+86     	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	a1 f4       	brne	.+40     	; 0x27d0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    27a8:	a2 e3       	ldi	r26, 0x32	; 50
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e2 e3       	ldi	r30, 0x32	; 50
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	48 2f       	mov	r20, r24
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <GPIO_writePin+0x194>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <GPIO_writePin+0x190>
    27ca:	84 2b       	or	r24, r20
    27cc:	8c 93       	st	X, r24
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    27d0:	a2 e3       	ldi	r26, 0x32	; 50
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e2 e3       	ldi	r30, 0x32	; 50
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	48 2f       	mov	r20, r24
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	02 2e       	mov	r0, r18
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <GPIO_writePin+0x1bc>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	0a 94       	dec	r0
    27f0:	e2 f7       	brpl	.-8      	; 0x27ea <GPIO_writePin+0x1b8>
    27f2:	80 95       	com	r24
    27f4:	84 23       	and	r24, r20
    27f6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <GPIO_readPin+0x6>
    280e:	00 d0       	rcall	.+0      	; 0x2810 <GPIO_readPin+0x8>
    2810:	0f 92       	push	r0
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    281a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	88 30       	cpi	r24, 0x08	; 8
    2820:	08 f0       	brcs	.+2      	; 0x2824 <GPIO_readPin+0x1c>
    2822:	84 c0       	rjmp	.+264    	; 0x292c <GPIO_readPin+0x124>
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	84 30       	cpi	r24, 0x04	; 4
    2828:	08 f0       	brcs	.+2      	; 0x282c <GPIO_readPin+0x24>
    282a:	80 c0       	rjmp	.+256    	; 0x292c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	3d 83       	std	Y+5, r19	; 0x05
    2834:	2c 83       	std	Y+4, r18	; 0x04
    2836:	4c 81       	ldd	r20, Y+4	; 0x04
    2838:	5d 81       	ldd	r21, Y+5	; 0x05
    283a:	41 30       	cpi	r20, 0x01	; 1
    283c:	51 05       	cpc	r21, r1
    283e:	79 f1       	breq	.+94     	; 0x289e <GPIO_readPin+0x96>
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	9d 81       	ldd	r25, Y+5	; 0x05
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	91 05       	cpc	r25, r1
    2848:	34 f4       	brge	.+12     	; 0x2856 <GPIO_readPin+0x4e>
    284a:	2c 81       	ldd	r18, Y+4	; 0x04
    284c:	3d 81       	ldd	r19, Y+5	; 0x05
    284e:	21 15       	cp	r18, r1
    2850:	31 05       	cpc	r19, r1
    2852:	69 f0       	breq	.+26     	; 0x286e <GPIO_readPin+0x66>
    2854:	6b c0       	rjmp	.+214    	; 0x292c <GPIO_readPin+0x124>
    2856:	4c 81       	ldd	r20, Y+4	; 0x04
    2858:	5d 81       	ldd	r21, Y+5	; 0x05
    285a:	42 30       	cpi	r20, 0x02	; 2
    285c:	51 05       	cpc	r21, r1
    285e:	b9 f1       	breq	.+110    	; 0x28ce <GPIO_readPin+0xc6>
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	9d 81       	ldd	r25, Y+5	; 0x05
    2864:	83 30       	cpi	r24, 0x03	; 3
    2866:	91 05       	cpc	r25, r1
    2868:	09 f4       	brne	.+2      	; 0x286c <GPIO_readPin+0x64>
    286a:	49 c0       	rjmp	.+146    	; 0x28fe <GPIO_readPin+0xf6>
    286c:	5f c0       	rjmp	.+190    	; 0x292c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    286e:	e9 e3       	ldi	r30, 0x39	; 57
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a9 01       	movw	r20, r18
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <GPIO_readPin+0x7e>
    2882:	55 95       	asr	r21
    2884:	47 95       	ror	r20
    2886:	8a 95       	dec	r24
    2888:	e2 f7       	brpl	.-8      	; 0x2882 <GPIO_readPin+0x7a>
    288a:	ca 01       	movw	r24, r20
    288c:	81 70       	andi	r24, 0x01	; 1
    288e:	90 70       	andi	r25, 0x00	; 0
    2890:	88 23       	and	r24, r24
    2892:	19 f0       	breq	.+6      	; 0x289a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	49 c0       	rjmp	.+146    	; 0x292c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    289a:	19 82       	std	Y+1, r1	; 0x01
    289c:	47 c0       	rjmp	.+142    	; 0x292c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    289e:	e6 e3       	ldi	r30, 0x36	; 54
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a9 01       	movw	r20, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <GPIO_readPin+0xae>
    28b2:	55 95       	asr	r21
    28b4:	47 95       	ror	r20
    28b6:	8a 95       	dec	r24
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <GPIO_readPin+0xaa>
    28ba:	ca 01       	movw	r24, r20
    28bc:	81 70       	andi	r24, 0x01	; 1
    28be:	90 70       	andi	r25, 0x00	; 0
    28c0:	88 23       	and	r24, r24
    28c2:	19 f0       	breq	.+6      	; 0x28ca <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	31 c0       	rjmp	.+98     	; 0x292c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28ca:	19 82       	std	Y+1, r1	; 0x01
    28cc:	2f c0       	rjmp	.+94     	; 0x292c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    28ce:	e3 e3       	ldi	r30, 0x33	; 51
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a9 01       	movw	r20, r18
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <GPIO_readPin+0xde>
    28e2:	55 95       	asr	r21
    28e4:	47 95       	ror	r20
    28e6:	8a 95       	dec	r24
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <GPIO_readPin+0xda>
    28ea:	ca 01       	movw	r24, r20
    28ec:	81 70       	andi	r24, 0x01	; 1
    28ee:	90 70       	andi	r25, 0x00	; 0
    28f0:	88 23       	and	r24, r24
    28f2:	19 f0       	breq	.+6      	; 0x28fa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	19 c0       	rjmp	.+50     	; 0x292c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	17 c0       	rjmp	.+46     	; 0x292c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    28fe:	e0 e3       	ldi	r30, 0x30	; 48
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a9 01       	movw	r20, r18
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <GPIO_readPin+0x10e>
    2912:	55 95       	asr	r21
    2914:	47 95       	ror	r20
    2916:	8a 95       	dec	r24
    2918:	e2 f7       	brpl	.-8      	; 0x2912 <GPIO_readPin+0x10a>
    291a:	ca 01       	movw	r24, r20
    291c:	81 70       	andi	r24, 0x01	; 1
    291e:	90 70       	andi	r25, 0x00	; 0
    2920:	88 23       	and	r24, r24
    2922:	19 f0       	breq	.+6      	; 0x292a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	01 c0       	rjmp	.+2      	; 0x292c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    292a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    292c:	89 81       	ldd	r24, Y+1	; 0x01
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <GPIO_setupPortDirection+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <GPIO_setupPortDirection+0x8>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	84 30       	cpi	r24, 0x04	; 4
    2952:	90 f5       	brcc	.+100    	; 0x29b8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	3c 83       	std	Y+4, r19	; 0x04
    295c:	2b 83       	std	Y+3, r18	; 0x03
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	81 30       	cpi	r24, 0x01	; 1
    2964:	91 05       	cpc	r25, r1
    2966:	d1 f0       	breq	.+52     	; 0x299c <GPIO_setupPortDirection+0x5e>
    2968:	2b 81       	ldd	r18, Y+3	; 0x03
    296a:	3c 81       	ldd	r19, Y+4	; 0x04
    296c:	22 30       	cpi	r18, 0x02	; 2
    296e:	31 05       	cpc	r19, r1
    2970:	2c f4       	brge	.+10     	; 0x297c <GPIO_setupPortDirection+0x3e>
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	61 f0       	breq	.+24     	; 0x2992 <GPIO_setupPortDirection+0x54>
    297a:	1e c0       	rjmp	.+60     	; 0x29b8 <GPIO_setupPortDirection+0x7a>
    297c:	2b 81       	ldd	r18, Y+3	; 0x03
    297e:	3c 81       	ldd	r19, Y+4	; 0x04
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	81 f0       	breq	.+32     	; 0x29a6 <GPIO_setupPortDirection+0x68>
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	83 30       	cpi	r24, 0x03	; 3
    298c:	91 05       	cpc	r25, r1
    298e:	81 f0       	breq	.+32     	; 0x29b0 <GPIO_setupPortDirection+0x72>
    2990:	13 c0       	rjmp	.+38     	; 0x29b8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2992:	ea e3       	ldi	r30, 0x3A	; 58
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	80 83       	st	Z, r24
    299a:	0e c0       	rjmp	.+28     	; 0x29b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    299c:	e7 e3       	ldi	r30, 0x37	; 55
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	80 83       	st	Z, r24
    29a4:	09 c0       	rjmp	.+18     	; 0x29b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    29a6:	e4 e3       	ldi	r30, 0x34	; 52
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	80 83       	st	Z, r24
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    29b0:	e1 e3       	ldi	r30, 0x31	; 49
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <GPIO_writePort+0x6>
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <GPIO_writePort+0x8>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	84 30       	cpi	r24, 0x04	; 4
    29da:	90 f5       	brcc	.+100    	; 0x2a40 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	3c 83       	std	Y+4, r19	; 0x04
    29e4:	2b 83       	std	Y+3, r18	; 0x03
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	91 05       	cpc	r25, r1
    29ee:	d1 f0       	breq	.+52     	; 0x2a24 <GPIO_writePort+0x5e>
    29f0:	2b 81       	ldd	r18, Y+3	; 0x03
    29f2:	3c 81       	ldd	r19, Y+4	; 0x04
    29f4:	22 30       	cpi	r18, 0x02	; 2
    29f6:	31 05       	cpc	r19, r1
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <GPIO_writePort+0x3e>
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	9c 81       	ldd	r25, Y+4	; 0x04
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	61 f0       	breq	.+24     	; 0x2a1a <GPIO_writePort+0x54>
    2a02:	1e c0       	rjmp	.+60     	; 0x2a40 <GPIO_writePort+0x7a>
    2a04:	2b 81       	ldd	r18, Y+3	; 0x03
    2a06:	3c 81       	ldd	r19, Y+4	; 0x04
    2a08:	22 30       	cpi	r18, 0x02	; 2
    2a0a:	31 05       	cpc	r19, r1
    2a0c:	81 f0       	breq	.+32     	; 0x2a2e <GPIO_writePort+0x68>
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	9c 81       	ldd	r25, Y+4	; 0x04
    2a12:	83 30       	cpi	r24, 0x03	; 3
    2a14:	91 05       	cpc	r25, r1
    2a16:	81 f0       	breq	.+32     	; 0x2a38 <GPIO_writePort+0x72>
    2a18:	13 c0       	rjmp	.+38     	; 0x2a40 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2a1a:	eb e3       	ldi	r30, 0x3B	; 59
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	80 83       	st	Z, r24
    2a22:	0e c0       	rjmp	.+28     	; 0x2a40 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2a24:	e8 e3       	ldi	r30, 0x38	; 56
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	80 83       	st	Z, r24
    2a2c:	09 c0       	rjmp	.+18     	; 0x2a40 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2a2e:	e5 e3       	ldi	r30, 0x35	; 53
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	80 83       	st	Z, r24
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2a38:	e2 e3       	ldi	r30, 0x32	; 50
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <GPIO_readPort+0x6>
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <GPIO_readPort+0x8>
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2a5c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	84 30       	cpi	r24, 0x04	; 4
    2a62:	90 f5       	brcc	.+100    	; 0x2ac8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	3c 83       	std	Y+4, r19	; 0x04
    2a6c:	2b 83       	std	Y+3, r18	; 0x03
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	91 05       	cpc	r25, r1
    2a76:	d1 f0       	breq	.+52     	; 0x2aac <GPIO_readPort+0x5e>
    2a78:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7c:	22 30       	cpi	r18, 0x02	; 2
    2a7e:	31 05       	cpc	r19, r1
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <GPIO_readPort+0x3e>
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	61 f0       	breq	.+24     	; 0x2aa2 <GPIO_readPort+0x54>
    2a8a:	1e c0       	rjmp	.+60     	; 0x2ac8 <GPIO_readPort+0x7a>
    2a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a90:	22 30       	cpi	r18, 0x02	; 2
    2a92:	31 05       	cpc	r19, r1
    2a94:	81 f0       	breq	.+32     	; 0x2ab6 <GPIO_readPort+0x68>
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	83 30       	cpi	r24, 0x03	; 3
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	81 f0       	breq	.+32     	; 0x2ac0 <GPIO_readPort+0x72>
    2aa0:	13 c0       	rjmp	.+38     	; 0x2ac8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2aa2:	e9 e3       	ldi	r30, 0x39	; 57
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	0e c0       	rjmp	.+28     	; 0x2ac8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2aac:	e6 e3       	ldi	r30, 0x36	; 54
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	09 c0       	rjmp	.+18     	; 0x2ac8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2ab6:	e3 e3       	ldi	r30, 0x33	; 51
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2ac0:	e0 e3       	ldi	r30, 0x30	; 48
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <KEYPAD_getPressedKey+0x6>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2aec:	82 e0       	ldi	r24, 0x02	; 2
    2aee:	61 e0       	ldi	r22, 0x01	; 1
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	62 e0       	ldi	r22, 0x02	; 2
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	63 e0       	ldi	r22, 0x03	; 3
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	64 e0       	ldi	r22, 0x04	; 4
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	65 e0       	ldi	r22, 0x05	; 5
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	66 e0       	ldi	r22, 0x06	; 6
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	67 e0       	ldi	r22, 0x07	; 7
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	35 c0       	rjmp	.+106    	; 0x2ba0 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2b36:	82 e0       	ldi	r24, 0x02	; 2
    2b38:	69 81       	ldd	r22, Y+1	; 0x01
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	69 81       	ldd	r22, Y+1	; 0x01
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2b4a:	1a 82       	std	Y+2, r1	; 0x02
    2b4c:	1e c0       	rjmp	.+60     	; 0x2b8a <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	98 2f       	mov	r25, r24
    2b52:	9c 5f       	subi	r25, 0xFC	; 252
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	69 2f       	mov	r22, r25
    2b58:	0e 94 04 14 	call	0x2808	; 0x2808 <GPIO_readPin>
    2b5c:	88 23       	and	r24, r24
    2b5e:	91 f4       	brne	.+36     	; 0x2b84 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	88 2f       	mov	r24, r24
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	88 0f       	add	r24, r24
    2b68:	99 1f       	adc	r25, r25
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	98 2f       	mov	r25, r24
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	89 0f       	add	r24, r25
    2b74:	8f 5f       	subi	r24, 0xFF	; 255
    2b76:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	8f 5f       	subi	r24, 0xFF	; 255
    2b88:	8a 83       	std	Y+2, r24	; 0x02
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	f8 f2       	brcs	.-66     	; 0x2b4e <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	69 81       	ldd	r22, Y+1	; 0x01
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	8f 5f       	subi	r24, 0xFF	; 255
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	84 30       	cpi	r24, 0x04	; 4
    2ba4:	40 f2       	brcs	.-112    	; 0x2b36 <KEYPAD_getPressedKey+0x5e>
    2ba6:	c5 cf       	rjmp	.-118    	; 0x2b32 <KEYPAD_getPressedKey+0x5a>

00002ba8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <KEYPAD_4x4_adjustKeyNumber+0x6>
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2bb6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	3c 83       	std	Y+4, r19	; 0x04
    2bc0:	2b 83       	std	Y+3, r18	; 0x03
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc6:	88 30       	cpi	r24, 0x08	; 8
    2bc8:	91 05       	cpc	r25, r1
    2bca:	09 f4       	brne	.+2      	; 0x2bce <KEYPAD_4x4_adjustKeyNumber+0x26>
    2bcc:	70 c0       	rjmp	.+224    	; 0x2cae <KEYPAD_4x4_adjustKeyNumber+0x106>
    2bce:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd2:	29 30       	cpi	r18, 0x09	; 9
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	5c f5       	brge	.+86     	; 0x2c2e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	84 30       	cpi	r24, 0x04	; 4
    2bde:	91 05       	cpc	r25, r1
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2be2:	59 c0       	rjmp	.+178    	; 0x2c96 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2be4:	2b 81       	ldd	r18, Y+3	; 0x03
    2be6:	3c 81       	ldd	r19, Y+4	; 0x04
    2be8:	25 30       	cpi	r18, 0x05	; 5
    2bea:	31 05       	cpc	r19, r1
    2bec:	9c f4       	brge	.+38     	; 0x2c14 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf2:	82 30       	cpi	r24, 0x02	; 2
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <KEYPAD_4x4_adjustKeyNumber+0x52>
    2bf8:	48 c0       	rjmp	.+144    	; 0x2c8a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bfe:	23 30       	cpi	r18, 0x03	; 3
    2c00:	31 05       	cpc	r19, r1
    2c02:	0c f0       	brlt	.+2      	; 0x2c06 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2c04:	45 c0       	rjmp	.+138    	; 0x2c90 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2c10:	39 c0       	rjmp	.+114    	; 0x2c84 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2c12:	67 c0       	rjmp	.+206    	; 0x2ce2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2c14:	2b 81       	ldd	r18, Y+3	; 0x03
    2c16:	3c 81       	ldd	r19, Y+4	; 0x04
    2c18:	26 30       	cpi	r18, 0x06	; 6
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2c1e:	41 c0       	rjmp	.+130    	; 0x2ca2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	87 30       	cpi	r24, 0x07	; 7
    2c26:	91 05       	cpc	r25, r1
    2c28:	0c f0       	brlt	.+2      	; 0x2c2c <KEYPAD_4x4_adjustKeyNumber+0x84>
    2c2a:	3e c0       	rjmp	.+124    	; 0x2ca8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2c2c:	37 c0       	rjmp	.+110    	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c30:	3c 81       	ldd	r19, Y+4	; 0x04
    2c32:	2c 30       	cpi	r18, 0x0C	; 12
    2c34:	31 05       	cpc	r19, r1
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2c38:	46 c0       	rjmp	.+140    	; 0x2cc6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3e:	8d 30       	cpi	r24, 0x0D	; 13
    2c40:	91 05       	cpc	r25, r1
    2c42:	5c f4       	brge	.+22     	; 0x2c5a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2c44:	2b 81       	ldd	r18, Y+3	; 0x03
    2c46:	3c 81       	ldd	r19, Y+4	; 0x04
    2c48:	2a 30       	cpi	r18, 0x0A	; 10
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	b1 f1       	breq	.+108    	; 0x2cba <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	8b 30       	cpi	r24, 0x0B	; 11
    2c54:	91 05       	cpc	r25, r1
    2c56:	a4 f5       	brge	.+104    	; 0x2cc0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c58:	2d c0       	rjmp	.+90     	; 0x2cb4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5e:	2e 30       	cpi	r18, 0x0E	; 14
    2c60:	31 05       	cpc	r19, r1
    2c62:	b9 f1       	breq	.+110    	; 0x2cd2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	8e 30       	cpi	r24, 0x0E	; 14
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	7c f1       	brlt	.+94     	; 0x2ccc <KEYPAD_4x4_adjustKeyNumber+0x124>
    2c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c70:	3c 81       	ldd	r19, Y+4	; 0x04
    2c72:	2f 30       	cpi	r18, 0x0F	; 15
    2c74:	31 05       	cpc	r19, r1
    2c76:	79 f1       	breq	.+94     	; 0x2cd6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	80 31       	cpi	r24, 0x10	; 16
    2c7e:	91 05       	cpc	r25, r1
    2c80:	69 f1       	breq	.+90     	; 0x2cdc <KEYPAD_4x4_adjustKeyNumber+0x134>
    2c82:	2f c0       	rjmp	.+94     	; 0x2ce2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2c84:	87 e0       	ldi	r24, 0x07	; 7
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	2e c0       	rjmp	.+92     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2c8a:	88 e0       	ldi	r24, 0x08	; 8
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	2b c0       	rjmp	.+86     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2c90:	89 e0       	ldi	r24, 0x09	; 9
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	28 c0       	rjmp	.+80     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2c96:	85 e2       	ldi	r24, 0x25	; 37
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	25 c0       	rjmp	.+74     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2c9c:	84 e0       	ldi	r24, 0x04	; 4
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	22 c0       	rjmp	.+68     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2ca2:	85 e0       	ldi	r24, 0x05	; 5
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	1f c0       	rjmp	.+62     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2ca8:	86 e0       	ldi	r24, 0x06	; 6
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	1c c0       	rjmp	.+56     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2cae:	8a e2       	ldi	r24, 0x2A	; 42
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	19 c0       	rjmp	.+50     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	16 c0       	rjmp	.+44     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	13 c0       	rjmp	.+38     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	10 c0       	rjmp	.+32     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2cc6:	8d e2       	ldi	r24, 0x2D	; 45
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	0d c0       	rjmp	.+26     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2ccc:	8d e0       	ldi	r24, 0x0D	; 13
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	0a c0       	rjmp	.+20     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2cd2:	19 82       	std	Y+1, r1	; 0x01
    2cd4:	08 c0       	rjmp	.+16     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2cd6:	8d e3       	ldi	r24, 0x3D	; 61
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	05 c0       	rjmp	.+10     	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2cdc:	8b e2       	ldi	r24, 0x2B	; 43
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	02 c0       	rjmp	.+4      	; 0x2ce6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	2e 97       	sbiw	r28, 0x0e	; 14
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2d0a:	83 e0       	ldi	r24, 0x03	; 3
    2d0c:	65 e0       	ldi	r22, 0x05	; 5
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2d14:	83 e0       	ldi	r24, 0x03	; 3
    2d16:	67 e0       	ldi	r22, 0x07	; 7
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	0e 94 2e 12 	call	0x245c	; 0x245c <GPIO_setupPinDirection>
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	a0 ea       	ldi	r26, 0xA0	; 160
    2d24:	b1 e4       	ldi	r27, 0x41	; 65
    2d26:	8b 87       	std	Y+11, r24	; 0x0b
    2d28:	9c 87       	std	Y+12, r25	; 0x0c
    2d2a:	ad 87       	std	Y+13, r26	; 0x0d
    2d2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	4a ef       	ldi	r20, 0xFA	; 250
    2d3c:	54 e4       	ldi	r21, 0x44	; 68
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	8f 83       	std	Y+7, r24	; 0x07
    2d48:	98 87       	std	Y+8, r25	; 0x08
    2d4a:	a9 87       	std	Y+9, r26	; 0x09
    2d4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e8       	ldi	r20, 0x80	; 128
    2d5c:	5f e3       	ldi	r21, 0x3F	; 63
    2d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d62:	88 23       	and	r24, r24
    2d64:	2c f4       	brge	.+10     	; 0x2d70 <LCD_init+0x7a>
		__ticks = 1;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	3f c0       	rjmp	.+126    	; 0x2dee <LCD_init+0xf8>
	else if (__tmp > 65535)
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	3f ef       	ldi	r19, 0xFF	; 255
    2d7c:	4f e7       	ldi	r20, 0x7F	; 127
    2d7e:	57 e4       	ldi	r21, 0x47	; 71
    2d80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d84:	18 16       	cp	r1, r24
    2d86:	4c f5       	brge	.+82     	; 0x2dda <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e2       	ldi	r20, 0x20	; 32
    2d96:	51 e4       	ldi	r21, 0x41	; 65
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	0f c0       	rjmp	.+30     	; 0x2dd0 <LCD_init+0xda>
    2db2:	88 ec       	ldi	r24, 0xC8	; 200
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9c 83       	std	Y+4, r25	; 0x04
    2db8:	8b 83       	std	Y+3, r24	; 0x03
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_init+0xc8>
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	9e 83       	std	Y+6, r25	; 0x06
    2dce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	69 f7       	brne	.-38     	; 0x2db2 <LCD_init+0xbc>
    2dd8:	14 c0       	rjmp	.+40     	; 0x2e02 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	6f 81       	ldd	r22, Y+7	; 0x07
    2ddc:	78 85       	ldd	r23, Y+8	; 0x08
    2dde:	89 85       	ldd	r24, Y+9	; 0x09
    2de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	9e 81       	ldd	r25, Y+6	; 0x06
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_init+0x104>
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	6f ef       	ldi	r22, 0xFF	; 255
    2e06:	0e 94 9f 14 	call	0x293e	; 0x293e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2e0a:	88 e3       	ldi	r24, 0x38	; 56
    2e0c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2e10:	8c e0       	ldi	r24, 0x0C	; 12
    2e12:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_sendCommand>
}
    2e1c:	2e 96       	adiw	r28, 0x0e	; 14
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	e9 97       	sbiw	r28, 0x39	; 57
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2e44:	83 e0       	ldi	r24, 0x03	; 3
    2e46:	65 e0       	ldi	r22, 0x05	; 5
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a0 e8       	ldi	r26, 0x80	; 128
    2e54:	bf e3       	ldi	r27, 0x3F	; 63
    2e56:	8d ab       	std	Y+53, r24	; 0x35
    2e58:	9e ab       	std	Y+54, r25	; 0x36
    2e5a:	af ab       	std	Y+55, r26	; 0x37
    2e5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e60:	7e a9       	ldd	r23, Y+54	; 0x36
    2e62:	8f a9       	ldd	r24, Y+55	; 0x37
    2e64:	98 ad       	ldd	r25, Y+56	; 0x38
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a ef       	ldi	r20, 0xFA	; 250
    2e6c:	54 e4       	ldi	r21, 0x44	; 68
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	89 ab       	std	Y+49, r24	; 0x31
    2e78:	9a ab       	std	Y+50, r25	; 0x32
    2e7a:	ab ab       	std	Y+51, r26	; 0x33
    2e7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e80:	7a a9       	ldd	r23, Y+50	; 0x32
    2e82:	8b a9       	ldd	r24, Y+51	; 0x33
    2e84:	9c a9       	ldd	r25, Y+52	; 0x34
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	2c f4       	brge	.+10     	; 0x2ea0 <LCD_sendCommand+0x72>
		__ticks = 1;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	98 ab       	std	Y+48, r25	; 0x30
    2e9c:	8f a7       	std	Y+47, r24	; 0x2f
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2ea0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ea2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	4c f5       	brge	.+82     	; 0x2f0a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	6d a9       	ldd	r22, Y+53	; 0x35
    2eba:	7e a9       	ldd	r23, Y+54	; 0x36
    2ebc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ebe:	98 ad       	ldd	r25, Y+56	; 0x38
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	98 ab       	std	Y+48, r25	; 0x30
    2ede:	8f a7       	std	Y+47, r24	; 0x2f
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <LCD_sendCommand+0xd2>
    2ee2:	88 ec       	ldi	r24, 0xC8	; 200
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9e a7       	std	Y+46, r25	; 0x2e
    2ee8:	8d a7       	std	Y+45, r24	; 0x2d
    2eea:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eec:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <LCD_sendCommand+0xc0>
    2ef2:	9e a7       	std	Y+46, r25	; 0x2e
    2ef4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef8:	98 a9       	ldd	r25, Y+48	; 0x30
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	98 ab       	std	Y+48, r25	; 0x30
    2efe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f02:	98 a9       	ldd	r25, Y+48	; 0x30
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <LCD_sendCommand+0xb4>
    2f08:	14 c0       	rjmp	.+40     	; 0x2f32 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f10:	9c a9       	ldd	r25, Y+52	; 0x34
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	98 ab       	std	Y+48, r25	; 0x30
    2f1c:	8f a7       	std	Y+47, r24	; 0x2f
    2f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f20:	98 a9       	ldd	r25, Y+48	; 0x30
    2f22:	9c a7       	std	Y+44, r25	; 0x2c
    2f24:	8b a7       	std	Y+43, r24	; 0x2b
    2f26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f28:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_sendCommand+0xfc>
    2f2e:	9c a7       	std	Y+44, r25	; 0x2c
    2f30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	67 e0       	ldi	r22, 0x07	; 7
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	a0 e8       	ldi	r26, 0x80	; 128
    2f42:	bf e3       	ldi	r27, 0x3F	; 63
    2f44:	8f a3       	std	Y+39, r24	; 0x27
    2f46:	98 a7       	std	Y+40, r25	; 0x28
    2f48:	a9 a7       	std	Y+41, r26	; 0x29
    2f4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f50:	89 a5       	ldd	r24, Y+41	; 0x29
    2f52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	4a ef       	ldi	r20, 0xFA	; 250
    2f5a:	54 e4       	ldi	r21, 0x44	; 68
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	8b a3       	std	Y+35, r24	; 0x23
    2f66:	9c a3       	std	Y+36, r25	; 0x24
    2f68:	ad a3       	std	Y+37, r26	; 0x25
    2f6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f70:	8d a1       	ldd	r24, Y+37	; 0x25
    2f72:	9e a1       	ldd	r25, Y+38	; 0x26
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e8       	ldi	r20, 0x80	; 128
    2f7a:	5f e3       	ldi	r21, 0x3F	; 63
    2f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f80:	88 23       	and	r24, r24
    2f82:	2c f4       	brge	.+10     	; 0x2f8e <LCD_sendCommand+0x160>
		__ticks = 1;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9a a3       	std	Y+34, r25	; 0x22
    2f8a:	89 a3       	std	Y+33, r24	; 0x21
    2f8c:	3f c0       	rjmp	.+126    	; 0x300c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2f8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f90:	7c a1       	ldd	r23, Y+36	; 0x24
    2f92:	8d a1       	ldd	r24, Y+37	; 0x25
    2f94:	9e a1       	ldd	r25, Y+38	; 0x26
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	3f ef       	ldi	r19, 0xFF	; 255
    2f9a:	4f e7       	ldi	r20, 0x7F	; 127
    2f9c:	57 e4       	ldi	r21, 0x47	; 71
    2f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa2:	18 16       	cp	r1, r24
    2fa4:	4c f5       	brge	.+82     	; 0x2ff8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	6f a1       	ldd	r22, Y+39	; 0x27
    2fa8:	78 a5       	ldd	r23, Y+40	; 0x28
    2faa:	89 a5       	ldd	r24, Y+41	; 0x29
    2fac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e2       	ldi	r20, 0x20	; 32
    2fb4:	51 e4       	ldi	r21, 0x41	; 65
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9a a3       	std	Y+34, r25	; 0x22
    2fcc:	89 a3       	std	Y+33, r24	; 0x21
    2fce:	0f c0       	rjmp	.+30     	; 0x2fee <LCD_sendCommand+0x1c0>
    2fd0:	88 ec       	ldi	r24, 0xC8	; 200
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	98 a3       	std	Y+32, r25	; 0x20
    2fd6:	8f 8f       	std	Y+31, r24	; 0x1f
    2fd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fda:	98 a1       	ldd	r25, Y+32	; 0x20
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <LCD_sendCommand+0x1ae>
    2fe0:	98 a3       	std	Y+32, r25	; 0x20
    2fe2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	9a a3       	std	Y+34, r25	; 0x22
    2fec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	69 f7       	brne	.-38     	; 0x2fd0 <LCD_sendCommand+0x1a2>
    2ff6:	14 c0       	rjmp	.+40     	; 0x3020 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    2ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9a a3       	std	Y+34, r25	; 0x22
    300a:	89 a3       	std	Y+33, r24	; 0x21
    300c:	89 a1       	ldd	r24, Y+33	; 0x21
    300e:	9a a1       	ldd	r25, Y+34	; 0x22
    3010:	9e 8f       	std	Y+30, r25	; 0x1e
    3012:	8d 8f       	std	Y+29, r24	; 0x1d
    3014:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3016:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <LCD_sendCommand+0x1ea>
    301c:	9e 8f       	std	Y+30, r25	; 0x1e
    301e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	69 ad       	ldd	r22, Y+57	; 0x39
    3024:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <GPIO_writePort>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	a0 e8       	ldi	r26, 0x80	; 128
    302e:	bf e3       	ldi	r27, 0x3F	; 63
    3030:	89 8f       	std	Y+25, r24	; 0x19
    3032:	9a 8f       	std	Y+26, r25	; 0x1a
    3034:	ab 8f       	std	Y+27, r26	; 0x1b
    3036:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3038:	69 8d       	ldd	r22, Y+25	; 0x19
    303a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    303c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    303e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	4a ef       	ldi	r20, 0xFA	; 250
    3046:	54 e4       	ldi	r21, 0x44	; 68
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	8d 8b       	std	Y+21, r24	; 0x15
    3052:	9e 8b       	std	Y+22, r25	; 0x16
    3054:	af 8b       	std	Y+23, r26	; 0x17
    3056:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3058:	6d 89       	ldd	r22, Y+21	; 0x15
    305a:	7e 89       	ldd	r23, Y+22	; 0x16
    305c:	8f 89       	ldd	r24, Y+23	; 0x17
    305e:	98 8d       	ldd	r25, Y+24	; 0x18
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e8       	ldi	r20, 0x80	; 128
    3066:	5f e3       	ldi	r21, 0x3F	; 63
    3068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306c:	88 23       	and	r24, r24
    306e:	2c f4       	brge	.+10     	; 0x307a <LCD_sendCommand+0x24c>
		__ticks = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	3f c0       	rjmp	.+126    	; 0x30f8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    307a:	6d 89       	ldd	r22, Y+21	; 0x15
    307c:	7e 89       	ldd	r23, Y+22	; 0x16
    307e:	8f 89       	ldd	r24, Y+23	; 0x17
    3080:	98 8d       	ldd	r25, Y+24	; 0x18
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	3f ef       	ldi	r19, 0xFF	; 255
    3086:	4f e7       	ldi	r20, 0x7F	; 127
    3088:	57 e4       	ldi	r21, 0x47	; 71
    308a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    308e:	18 16       	cp	r1, r24
    3090:	4c f5       	brge	.+82     	; 0x30e4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3092:	69 8d       	ldd	r22, Y+25	; 0x19
    3094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e2       	ldi	r20, 0x20	; 32
    30a0:	51 e4       	ldi	r21, 0x41	; 65
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9c 8b       	std	Y+20, r25	; 0x14
    30b8:	8b 8b       	std	Y+19, r24	; 0x13
    30ba:	0f c0       	rjmp	.+30     	; 0x30da <LCD_sendCommand+0x2ac>
    30bc:	88 ec       	ldi	r24, 0xC8	; 200
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	9a 8b       	std	Y+18, r25	; 0x12
    30c2:	89 8b       	std	Y+17, r24	; 0x11
    30c4:	89 89       	ldd	r24, Y+17	; 0x11
    30c6:	9a 89       	ldd	r25, Y+18	; 0x12
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <LCD_sendCommand+0x29a>
    30cc:	9a 8b       	std	Y+18, r25	; 0x12
    30ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d0:	8b 89       	ldd	r24, Y+19	; 0x13
    30d2:	9c 89       	ldd	r25, Y+20	; 0x14
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	9c 8b       	std	Y+20, r25	; 0x14
    30d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30da:	8b 89       	ldd	r24, Y+19	; 0x13
    30dc:	9c 89       	ldd	r25, Y+20	; 0x14
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	69 f7       	brne	.-38     	; 0x30bc <LCD_sendCommand+0x28e>
    30e2:	14 c0       	rjmp	.+40     	; 0x310c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e4:	6d 89       	ldd	r22, Y+21	; 0x15
    30e6:	7e 89       	ldd	r23, Y+22	; 0x16
    30e8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ea:	98 8d       	ldd	r25, Y+24	; 0x18
    30ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	9c 8b       	std	Y+20, r25	; 0x14
    30f6:	8b 8b       	std	Y+19, r24	; 0x13
    30f8:	8b 89       	ldd	r24, Y+19	; 0x13
    30fa:	9c 89       	ldd	r25, Y+20	; 0x14
    30fc:	98 8b       	std	Y+16, r25	; 0x10
    30fe:	8f 87       	std	Y+15, r24	; 0x0f
    3100:	8f 85       	ldd	r24, Y+15	; 0x0f
    3102:	98 89       	ldd	r25, Y+16	; 0x10
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <LCD_sendCommand+0x2d6>
    3108:	98 8b       	std	Y+16, r25	; 0x10
    310a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    310c:	83 e0       	ldi	r24, 0x03	; 3
    310e:	67 e0       	ldi	r22, 0x07	; 7
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a0 e8       	ldi	r26, 0x80	; 128
    311c:	bf e3       	ldi	r27, 0x3F	; 63
    311e:	8b 87       	std	Y+11, r24	; 0x0b
    3120:	9c 87       	std	Y+12, r25	; 0x0c
    3122:	ad 87       	std	Y+13, r26	; 0x0d
    3124:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3126:	6b 85       	ldd	r22, Y+11	; 0x0b
    3128:	7c 85       	ldd	r23, Y+12	; 0x0c
    312a:	8d 85       	ldd	r24, Y+13	; 0x0d
    312c:	9e 85       	ldd	r25, Y+14	; 0x0e
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	4a ef       	ldi	r20, 0xFA	; 250
    3134:	54 e4       	ldi	r21, 0x44	; 68
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	8f 83       	std	Y+7, r24	; 0x07
    3140:	98 87       	std	Y+8, r25	; 0x08
    3142:	a9 87       	std	Y+9, r26	; 0x09
    3144:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3146:	6f 81       	ldd	r22, Y+7	; 0x07
    3148:	78 85       	ldd	r23, Y+8	; 0x08
    314a:	89 85       	ldd	r24, Y+9	; 0x09
    314c:	9a 85       	ldd	r25, Y+10	; 0x0a
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	5f e3       	ldi	r21, 0x3F	; 63
    3156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315a:	88 23       	and	r24, r24
    315c:	2c f4       	brge	.+10     	; 0x3168 <LCD_sendCommand+0x33a>
		__ticks = 1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	3f c0       	rjmp	.+126    	; 0x31e6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3168:	6f 81       	ldd	r22, Y+7	; 0x07
    316a:	78 85       	ldd	r23, Y+8	; 0x08
    316c:	89 85       	ldd	r24, Y+9	; 0x09
    316e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	3f ef       	ldi	r19, 0xFF	; 255
    3174:	4f e7       	ldi	r20, 0x7F	; 127
    3176:	57 e4       	ldi	r21, 0x47	; 71
    3178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317c:	18 16       	cp	r1, r24
    317e:	4c f5       	brge	.+82     	; 0x31d2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3180:	6b 85       	ldd	r22, Y+11	; 0x0b
    3182:	7c 85       	ldd	r23, Y+12	; 0x0c
    3184:	8d 85       	ldd	r24, Y+13	; 0x0d
    3186:	9e 85       	ldd	r25, Y+14	; 0x0e
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e2       	ldi	r20, 0x20	; 32
    318e:	51 e4       	ldi	r21, 0x41	; 65
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	0f c0       	rjmp	.+30     	; 0x31c8 <LCD_sendCommand+0x39a>
    31aa:	88 ec       	ldi	r24, 0xC8	; 200
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9c 83       	std	Y+4, r25	; 0x04
    31b0:	8b 83       	std	Y+3, r24	; 0x03
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	9c 81       	ldd	r25, Y+4	; 0x04
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <LCD_sendCommand+0x388>
    31ba:	9c 83       	std	Y+4, r25	; 0x04
    31bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	9e 81       	ldd	r25, Y+6	; 0x06
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	9e 83       	std	Y+6, r25	; 0x06
    31c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	9e 81       	ldd	r25, Y+6	; 0x06
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	69 f7       	brne	.-38     	; 0x31aa <LCD_sendCommand+0x37c>
    31d0:	14 c0       	rjmp	.+40     	; 0x31fa <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d2:	6f 81       	ldd	r22, Y+7	; 0x07
    31d4:	78 85       	ldd	r23, Y+8	; 0x08
    31d6:	89 85       	ldd	r24, Y+9	; 0x09
    31d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9e 83       	std	Y+6, r25	; 0x06
    31e4:	8d 83       	std	Y+5, r24	; 0x05
    31e6:	8d 81       	ldd	r24, Y+5	; 0x05
    31e8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	89 83       	std	Y+1, r24	; 0x01
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <LCD_sendCommand+0x3c4>
    31f6:	9a 83       	std	Y+2, r25	; 0x02
    31f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31fa:	e9 96       	adiw	r28, 0x39	; 57
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	e9 97       	sbiw	r28, 0x39	; 57
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	65 e0       	ldi	r22, 0x05	; 5
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	a0 e8       	ldi	r26, 0x80	; 128
    3232:	bf e3       	ldi	r27, 0x3F	; 63
    3234:	8d ab       	std	Y+53, r24	; 0x35
    3236:	9e ab       	std	Y+54, r25	; 0x36
    3238:	af ab       	std	Y+55, r26	; 0x37
    323a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323c:	6d a9       	ldd	r22, Y+53	; 0x35
    323e:	7e a9       	ldd	r23, Y+54	; 0x36
    3240:	8f a9       	ldd	r24, Y+55	; 0x37
    3242:	98 ad       	ldd	r25, Y+56	; 0x38
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	4a ef       	ldi	r20, 0xFA	; 250
    324a:	54 e4       	ldi	r21, 0x44	; 68
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	89 ab       	std	Y+49, r24	; 0x31
    3256:	9a ab       	std	Y+50, r25	; 0x32
    3258:	ab ab       	std	Y+51, r26	; 0x33
    325a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    325c:	69 a9       	ldd	r22, Y+49	; 0x31
    325e:	7a a9       	ldd	r23, Y+50	; 0x32
    3260:	8b a9       	ldd	r24, Y+51	; 0x33
    3262:	9c a9       	ldd	r25, Y+52	; 0x34
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e8       	ldi	r20, 0x80	; 128
    326a:	5f e3       	ldi	r21, 0x3F	; 63
    326c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3270:	88 23       	and	r24, r24
    3272:	2c f4       	brge	.+10     	; 0x327e <LCD_displayCharacter+0x72>
		__ticks = 1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	98 ab       	std	Y+48, r25	; 0x30
    327a:	8f a7       	std	Y+47, r24	; 0x2f
    327c:	3f c0       	rjmp	.+126    	; 0x32fc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    327e:	69 a9       	ldd	r22, Y+49	; 0x31
    3280:	7a a9       	ldd	r23, Y+50	; 0x32
    3282:	8b a9       	ldd	r24, Y+51	; 0x33
    3284:	9c a9       	ldd	r25, Y+52	; 0x34
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	3f ef       	ldi	r19, 0xFF	; 255
    328a:	4f e7       	ldi	r20, 0x7F	; 127
    328c:	57 e4       	ldi	r21, 0x47	; 71
    328e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3292:	18 16       	cp	r1, r24
    3294:	4c f5       	brge	.+82     	; 0x32e8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3296:	6d a9       	ldd	r22, Y+53	; 0x35
    3298:	7e a9       	ldd	r23, Y+54	; 0x36
    329a:	8f a9       	ldd	r24, Y+55	; 0x37
    329c:	98 ad       	ldd	r25, Y+56	; 0x38
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e2       	ldi	r20, 0x20	; 32
    32a4:	51 e4       	ldi	r21, 0x41	; 65
    32a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	98 ab       	std	Y+48, r25	; 0x30
    32bc:	8f a7       	std	Y+47, r24	; 0x2f
    32be:	0f c0       	rjmp	.+30     	; 0x32de <LCD_displayCharacter+0xd2>
    32c0:	88 ec       	ldi	r24, 0xC8	; 200
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	9e a7       	std	Y+46, r25	; 0x2e
    32c6:	8d a7       	std	Y+45, r24	; 0x2d
    32c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    32ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <LCD_displayCharacter+0xc0>
    32d0:	9e a7       	std	Y+46, r25	; 0x2e
    32d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d6:	98 a9       	ldd	r25, Y+48	; 0x30
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	98 ab       	std	Y+48, r25	; 0x30
    32dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32de:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e0:	98 a9       	ldd	r25, Y+48	; 0x30
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	69 f7       	brne	.-38     	; 0x32c0 <LCD_displayCharacter+0xb4>
    32e6:	14 c0       	rjmp	.+40     	; 0x3310 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e8:	69 a9       	ldd	r22, Y+49	; 0x31
    32ea:	7a a9       	ldd	r23, Y+50	; 0x32
    32ec:	8b a9       	ldd	r24, Y+51	; 0x33
    32ee:	9c a9       	ldd	r25, Y+52	; 0x34
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	98 ab       	std	Y+48, r25	; 0x30
    32fa:	8f a7       	std	Y+47, r24	; 0x2f
    32fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3300:	9c a7       	std	Y+44, r25	; 0x2c
    3302:	8b a7       	std	Y+43, r24	; 0x2b
    3304:	8b a5       	ldd	r24, Y+43	; 0x2b
    3306:	9c a5       	ldd	r25, Y+44	; 0x2c
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <LCD_displayCharacter+0xfc>
    330c:	9c a7       	std	Y+44, r25	; 0x2c
    330e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3310:	83 e0       	ldi	r24, 0x03	; 3
    3312:	67 e0       	ldi	r22, 0x07	; 7
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a0 e8       	ldi	r26, 0x80	; 128
    3320:	bf e3       	ldi	r27, 0x3F	; 63
    3322:	8f a3       	std	Y+39, r24	; 0x27
    3324:	98 a7       	std	Y+40, r25	; 0x28
    3326:	a9 a7       	std	Y+41, r26	; 0x29
    3328:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332a:	6f a1       	ldd	r22, Y+39	; 0x27
    332c:	78 a5       	ldd	r23, Y+40	; 0x28
    332e:	89 a5       	ldd	r24, Y+41	; 0x29
    3330:	9a a5       	ldd	r25, Y+42	; 0x2a
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a ef       	ldi	r20, 0xFA	; 250
    3338:	54 e4       	ldi	r21, 0x44	; 68
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8b a3       	std	Y+35, r24	; 0x23
    3344:	9c a3       	std	Y+36, r25	; 0x24
    3346:	ad a3       	std	Y+37, r26	; 0x25
    3348:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    334a:	6b a1       	ldd	r22, Y+35	; 0x23
    334c:	7c a1       	ldd	r23, Y+36	; 0x24
    334e:	8d a1       	ldd	r24, Y+37	; 0x25
    3350:	9e a1       	ldd	r25, Y+38	; 0x26
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e8       	ldi	r20, 0x80	; 128
    3358:	5f e3       	ldi	r21, 0x3F	; 63
    335a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    335e:	88 23       	and	r24, r24
    3360:	2c f4       	brge	.+10     	; 0x336c <LCD_displayCharacter+0x160>
		__ticks = 1;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9a a3       	std	Y+34, r25	; 0x22
    3368:	89 a3       	std	Y+33, r24	; 0x21
    336a:	3f c0       	rjmp	.+126    	; 0x33ea <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    336c:	6b a1       	ldd	r22, Y+35	; 0x23
    336e:	7c a1       	ldd	r23, Y+36	; 0x24
    3370:	8d a1       	ldd	r24, Y+37	; 0x25
    3372:	9e a1       	ldd	r25, Y+38	; 0x26
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	3f ef       	ldi	r19, 0xFF	; 255
    3378:	4f e7       	ldi	r20, 0x7F	; 127
    337a:	57 e4       	ldi	r21, 0x47	; 71
    337c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3380:	18 16       	cp	r1, r24
    3382:	4c f5       	brge	.+82     	; 0x33d6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3384:	6f a1       	ldd	r22, Y+39	; 0x27
    3386:	78 a5       	ldd	r23, Y+40	; 0x28
    3388:	89 a5       	ldd	r24, Y+41	; 0x29
    338a:	9a a5       	ldd	r25, Y+42	; 0x2a
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e2       	ldi	r20, 0x20	; 32
    3392:	51 e4       	ldi	r21, 0x41	; 65
    3394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9a a3       	std	Y+34, r25	; 0x22
    33aa:	89 a3       	std	Y+33, r24	; 0x21
    33ac:	0f c0       	rjmp	.+30     	; 0x33cc <LCD_displayCharacter+0x1c0>
    33ae:	88 ec       	ldi	r24, 0xC8	; 200
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	98 a3       	std	Y+32, r25	; 0x20
    33b4:	8f 8f       	std	Y+31, r24	; 0x1f
    33b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33b8:	98 a1       	ldd	r25, Y+32	; 0x20
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <LCD_displayCharacter+0x1ae>
    33be:	98 a3       	std	Y+32, r25	; 0x20
    33c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c2:	89 a1       	ldd	r24, Y+33	; 0x21
    33c4:	9a a1       	ldd	r25, Y+34	; 0x22
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	9a a3       	std	Y+34, r25	; 0x22
    33ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33cc:	89 a1       	ldd	r24, Y+33	; 0x21
    33ce:	9a a1       	ldd	r25, Y+34	; 0x22
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	69 f7       	brne	.-38     	; 0x33ae <LCD_displayCharacter+0x1a2>
    33d4:	14 c0       	rjmp	.+40     	; 0x33fe <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d6:	6b a1       	ldd	r22, Y+35	; 0x23
    33d8:	7c a1       	ldd	r23, Y+36	; 0x24
    33da:	8d a1       	ldd	r24, Y+37	; 0x25
    33dc:	9e a1       	ldd	r25, Y+38	; 0x26
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	9a a3       	std	Y+34, r25	; 0x22
    33e8:	89 a3       	std	Y+33, r24	; 0x21
    33ea:	89 a1       	ldd	r24, Y+33	; 0x21
    33ec:	9a a1       	ldd	r25, Y+34	; 0x22
    33ee:	9e 8f       	std	Y+30, r25	; 0x1e
    33f0:	8d 8f       	std	Y+29, r24	; 0x1d
    33f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <LCD_displayCharacter+0x1ea>
    33fa:	9e 8f       	std	Y+30, r25	; 0x1e
    33fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	69 ad       	ldd	r22, Y+57	; 0x39
    3402:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <GPIO_writePort>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	a0 e8       	ldi	r26, 0x80	; 128
    340c:	bf e3       	ldi	r27, 0x3F	; 63
    340e:	89 8f       	std	Y+25, r24	; 0x19
    3410:	9a 8f       	std	Y+26, r25	; 0x1a
    3412:	ab 8f       	std	Y+27, r26	; 0x1b
    3414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3416:	69 8d       	ldd	r22, Y+25	; 0x19
    3418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    341c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	4a ef       	ldi	r20, 0xFA	; 250
    3424:	54 e4       	ldi	r21, 0x44	; 68
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	8d 8b       	std	Y+21, r24	; 0x15
    3430:	9e 8b       	std	Y+22, r25	; 0x16
    3432:	af 8b       	std	Y+23, r26	; 0x17
    3434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3436:	6d 89       	ldd	r22, Y+21	; 0x15
    3438:	7e 89       	ldd	r23, Y+22	; 0x16
    343a:	8f 89       	ldd	r24, Y+23	; 0x17
    343c:	98 8d       	ldd	r25, Y+24	; 0x18
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e8       	ldi	r20, 0x80	; 128
    3444:	5f e3       	ldi	r21, 0x3F	; 63
    3446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    344a:	88 23       	and	r24, r24
    344c:	2c f4       	brge	.+10     	; 0x3458 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	3f c0       	rjmp	.+126    	; 0x34d6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3458:	6d 89       	ldd	r22, Y+21	; 0x15
    345a:	7e 89       	ldd	r23, Y+22	; 0x16
    345c:	8f 89       	ldd	r24, Y+23	; 0x17
    345e:	98 8d       	ldd	r25, Y+24	; 0x18
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	3f ef       	ldi	r19, 0xFF	; 255
    3464:	4f e7       	ldi	r20, 0x7F	; 127
    3466:	57 e4       	ldi	r21, 0x47	; 71
    3468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    346c:	18 16       	cp	r1, r24
    346e:	4c f5       	brge	.+82     	; 0x34c2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3470:	69 8d       	ldd	r22, Y+25	; 0x19
    3472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e2       	ldi	r20, 0x20	; 32
    347e:	51 e4       	ldi	r21, 0x41	; 65
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	9c 8b       	std	Y+20, r25	; 0x14
    3496:	8b 8b       	std	Y+19, r24	; 0x13
    3498:	0f c0       	rjmp	.+30     	; 0x34b8 <LCD_displayCharacter+0x2ac>
    349a:	88 ec       	ldi	r24, 0xC8	; 200
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	9a 8b       	std	Y+18, r25	; 0x12
    34a0:	89 8b       	std	Y+17, r24	; 0x11
    34a2:	89 89       	ldd	r24, Y+17	; 0x11
    34a4:	9a 89       	ldd	r25, Y+18	; 0x12
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <LCD_displayCharacter+0x29a>
    34aa:	9a 8b       	std	Y+18, r25	; 0x12
    34ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ae:	8b 89       	ldd	r24, Y+19	; 0x13
    34b0:	9c 89       	ldd	r25, Y+20	; 0x14
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	9c 8b       	std	Y+20, r25	; 0x14
    34b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ba:	9c 89       	ldd	r25, Y+20	; 0x14
    34bc:	00 97       	sbiw	r24, 0x00	; 0
    34be:	69 f7       	brne	.-38     	; 0x349a <LCD_displayCharacter+0x28e>
    34c0:	14 c0       	rjmp	.+40     	; 0x34ea <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c2:	6d 89       	ldd	r22, Y+21	; 0x15
    34c4:	7e 89       	ldd	r23, Y+22	; 0x16
    34c6:	8f 89       	ldd	r24, Y+23	; 0x17
    34c8:	98 8d       	ldd	r25, Y+24	; 0x18
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	9c 8b       	std	Y+20, r25	; 0x14
    34d4:	8b 8b       	std	Y+19, r24	; 0x13
    34d6:	8b 89       	ldd	r24, Y+19	; 0x13
    34d8:	9c 89       	ldd	r25, Y+20	; 0x14
    34da:	98 8b       	std	Y+16, r25	; 0x10
    34dc:	8f 87       	std	Y+15, r24	; 0x0f
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	98 89       	ldd	r25, Y+16	; 0x10
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <LCD_displayCharacter+0x2d6>
    34e6:	98 8b       	std	Y+16, r25	; 0x10
    34e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    34ea:	83 e0       	ldi	r24, 0x03	; 3
    34ec:	67 e0       	ldi	r22, 0x07	; 7
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	0e 94 19 13 	call	0x2632	; 0x2632 <GPIO_writePin>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a0 e8       	ldi	r26, 0x80	; 128
    34fa:	bf e3       	ldi	r27, 0x3F	; 63
    34fc:	8b 87       	std	Y+11, r24	; 0x0b
    34fe:	9c 87       	std	Y+12, r25	; 0x0c
    3500:	ad 87       	std	Y+13, r26	; 0x0d
    3502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	6b 85       	ldd	r22, Y+11	; 0x0b
    3506:	7c 85       	ldd	r23, Y+12	; 0x0c
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4a ef       	ldi	r20, 0xFA	; 250
    3512:	54 e4       	ldi	r21, 0x44	; 68
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8f 83       	std	Y+7, r24	; 0x07
    351e:	98 87       	std	Y+8, r25	; 0x08
    3520:	a9 87       	std	Y+9, r26	; 0x09
    3522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	3f c0       	rjmp	.+126    	; 0x35c4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	3f ef       	ldi	r19, 0xFF	; 255
    3552:	4f e7       	ldi	r20, 0x7F	; 127
    3554:	57 e4       	ldi	r21, 0x47	; 71
    3556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    355a:	18 16       	cp	r1, r24
    355c:	4c f5       	brge	.+82     	; 0x35b0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3560:	7c 85       	ldd	r23, Y+12	; 0x0c
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <LCD_displayCharacter+0x39a>
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <LCD_displayCharacter+0x388>
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <LCD_displayCharacter+0x37c>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_displayCharacter+0x3c4>
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    35d8:	e9 96       	adiw	r28, 0x39	; 57
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <LCD_displayString+0x6>
    35f0:	0f 92       	push	r0
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	9b 83       	std	Y+3, r25	; 0x03
    35f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35fa:	19 82       	std	Y+1, r1	; 0x01
    35fc:	0e c0       	rjmp	.+28     	; 0x361a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	28 2f       	mov	r18, r24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	9b 81       	ldd	r25, Y+3	; 0x03
    3608:	fc 01       	movw	r30, r24
    360a:	e2 0f       	add	r30, r18
    360c:	f3 1f       	adc	r31, r19
    360e:	80 81       	ld	r24, Z
    3610:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_displayCharacter>
		i++;
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	8f 5f       	subi	r24, 0xFF	; 255
    3618:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	fc 01       	movw	r30, r24
    3626:	e2 0f       	add	r30, r18
    3628:	f3 1f       	adc	r31, r19
    362a:	80 81       	ld	r24, Z
    362c:	88 23       	and	r24, r24
    362e:	39 f7       	brne	.-50     	; 0x35fe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	00 d0       	rcall	.+0      	; 0x3642 <LCD_moveCursor+0x6>
    3642:	00 d0       	rcall	.+0      	; 0x3644 <LCD_moveCursor+0x8>
    3644:	0f 92       	push	r0
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	8a 83       	std	Y+2, r24	; 0x02
    364c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	28 2f       	mov	r18, r24
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	3d 83       	std	Y+5, r19	; 0x05
    3656:	2c 83       	std	Y+4, r18	; 0x04
    3658:	8c 81       	ldd	r24, Y+4	; 0x04
    365a:	9d 81       	ldd	r25, Y+5	; 0x05
    365c:	81 30       	cpi	r24, 0x01	; 1
    365e:	91 05       	cpc	r25, r1
    3660:	c1 f0       	breq	.+48     	; 0x3692 <LCD_moveCursor+0x56>
    3662:	2c 81       	ldd	r18, Y+4	; 0x04
    3664:	3d 81       	ldd	r19, Y+5	; 0x05
    3666:	22 30       	cpi	r18, 0x02	; 2
    3668:	31 05       	cpc	r19, r1
    366a:	2c f4       	brge	.+10     	; 0x3676 <LCD_moveCursor+0x3a>
    366c:	8c 81       	ldd	r24, Y+4	; 0x04
    366e:	9d 81       	ldd	r25, Y+5	; 0x05
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	61 f0       	breq	.+24     	; 0x368c <LCD_moveCursor+0x50>
    3674:	19 c0       	rjmp	.+50     	; 0x36a8 <LCD_moveCursor+0x6c>
    3676:	2c 81       	ldd	r18, Y+4	; 0x04
    3678:	3d 81       	ldd	r19, Y+5	; 0x05
    367a:	22 30       	cpi	r18, 0x02	; 2
    367c:	31 05       	cpc	r19, r1
    367e:	69 f0       	breq	.+26     	; 0x369a <LCD_moveCursor+0x5e>
    3680:	8c 81       	ldd	r24, Y+4	; 0x04
    3682:	9d 81       	ldd	r25, Y+5	; 0x05
    3684:	83 30       	cpi	r24, 0x03	; 3
    3686:	91 05       	cpc	r25, r1
    3688:	61 f0       	breq	.+24     	; 0x36a2 <LCD_moveCursor+0x66>
    368a:	0e c0       	rjmp	.+28     	; 0x36a8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	0b c0       	rjmp	.+22     	; 0x36a8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	80 5c       	subi	r24, 0xC0	; 192
    3696:	89 83       	std	Y+1, r24	; 0x01
    3698:	07 c0       	rjmp	.+14     	; 0x36a8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	80 5f       	subi	r24, 0xF0	; 240
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	03 c0       	rjmp	.+6      	; 0x36a8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	80 5b       	subi	r24, 0xB0	; 176
    36a6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	80 68       	ori	r24, 0x80	; 128
    36ac:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_sendCommand>
}
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <LCD_displayStringRowColumn+0x6>
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <LCD_displayStringRowColumn+0x8>
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	6a 83       	std	Y+2, r22	; 0x02
    36d0:	5c 83       	std	Y+4, r21	; 0x04
    36d2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	6a 81       	ldd	r22, Y+2	; 0x02
    36d8:	0e 94 1e 1b 	call	0x363c	; 0x363c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    36dc:	8b 81       	ldd	r24, Y+3	; 0x03
    36de:	9c 81       	ldd	r25, Y+4	; 0x04
    36e0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
}
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	62 97       	sbiw	r28, 0x12	; 18
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	9a 8b       	std	Y+18, r25	; 0x12
    3708:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    370a:	89 89       	ldd	r24, Y+17	; 0x11
    370c:	9a 89       	ldd	r25, Y+18	; 0x12
    370e:	9e 01       	movw	r18, r28
    3710:	2f 5f       	subi	r18, 0xFF	; 255
    3712:	3f 4f       	sbci	r19, 0xFF	; 255
    3714:	b9 01       	movw	r22, r18
    3716:	4a e0       	ldi	r20, 0x0A	; 10
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <itoa>
   LCD_displayString(buff); /* Display the string */
    371e:	ce 01       	movw	r24, r28
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_displayString>
}
    3726:	62 96       	adiw	r28, 0x12	; 18
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_sendCommand>
}
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	00 d0       	rcall	.+0      	; 0x3752 <UART_init+0x6>
    3752:	00 d0       	rcall	.+0      	; 0x3754 <UART_init+0x8>
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	9c 83       	std	Y+4, r25	; 0x04
    375a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    375c:	1a 82       	std	Y+2, r1	; 0x02
    375e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3760:	eb e2       	ldi	r30, 0x2B	; 43
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	82 e0       	ldi	r24, 0x02	; 2
    3766:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3768:	ea e2       	ldi	r30, 0x2A	; 42
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	88 e1       	ldi	r24, 0x18	; 24
    376e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3770:	e0 e4       	ldi	r30, 0x40	; 64
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	86 e8       	ldi	r24, 0x86	; 134
    3776:	80 83       	st	Z, r24
	
	UCSRC =(0XF7 & UCSRC) |((Config_Ptr->stop_bit)<<3);
    3778:	a0 e4       	ldi	r26, 0x40	; 64
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	e0 e4       	ldi	r30, 0x40	; 64
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	80 81       	ld	r24, Z
    3782:	28 2f       	mov	r18, r24
    3784:	27 7f       	andi	r18, 0xF7	; 247
    3786:	eb 81       	ldd	r30, Y+3	; 0x03
    3788:	fc 81       	ldd	r31, Y+4	; 0x04
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	88 0f       	add	r24, r24
    379a:	99 1f       	adc	r25, r25
    379c:	82 2b       	or	r24, r18
    379e:	8c 93       	st	X, r24
	
	UCSRC =(0XCF & UCSRC) |((Config_Ptr->parity)<<4);
    37a0:	a0 e4       	ldi	r26, 0x40	; 64
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	e0 e4       	ldi	r30, 0x40	; 64
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	28 2f       	mov	r18, r24
    37ac:	2f 7c       	andi	r18, 0xCF	; 207
    37ae:	eb 81       	ldd	r30, Y+3	; 0x03
    37b0:	fc 81       	ldd	r31, Y+4	; 0x04
    37b2:	81 81       	ldd	r24, Z+1	; 0x01
    37b4:	88 2f       	mov	r24, r24
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	82 95       	swap	r24
    37ba:	92 95       	swap	r25
    37bc:	90 7f       	andi	r25, 0xF0	; 240
    37be:	98 27       	eor	r25, r24
    37c0:	80 7f       	andi	r24, 0xF0	; 240
    37c2:	98 27       	eor	r25, r24
    37c4:	82 2b       	or	r24, r18
    37c6:	8c 93       	st	X, r24
	
	UCSRC =(0XFC & UCSRC) |(Config_Ptr->bit_data);
    37c8:	a0 e4       	ldi	r26, 0x40	; 64
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	e0 e4       	ldi	r30, 0x40	; 64
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	98 2f       	mov	r25, r24
    37d4:	9c 7f       	andi	r25, 0xFC	; 252
    37d6:	eb 81       	ldd	r30, Y+3	; 0x03
    37d8:	fc 81       	ldd	r31, Y+4	; 0x04
    37da:	80 81       	ld	r24, Z
    37dc:	89 2b       	or	r24, r25
    37de:	8c 93       	st	X, r24
		
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    37e0:	eb 81       	ldd	r30, Y+3	; 0x03
    37e2:	fc 81       	ldd	r31, Y+4	; 0x04
    37e4:	83 81       	ldd	r24, Z+3	; 0x03
    37e6:	94 81       	ldd	r25, Z+4	; 0x04
    37e8:	a5 81       	ldd	r26, Z+5	; 0x05
    37ea:	b6 81       	ldd	r27, Z+6	; 0x06
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	aa 1f       	adc	r26, r26
    37f2:	bb 1f       	adc	r27, r27
    37f4:	88 0f       	add	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	aa 1f       	adc	r26, r26
    37fa:	bb 1f       	adc	r27, r27
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	aa 1f       	adc	r26, r26
    3802:	bb 1f       	adc	r27, r27
    3804:	9c 01       	movw	r18, r24
    3806:	ad 01       	movw	r20, r26
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	92 e1       	ldi	r25, 0x12	; 18
    380c:	aa e7       	ldi	r26, 0x7A	; 122
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	bc 01       	movw	r22, r24
    3812:	cd 01       	movw	r24, r26
    3814:	0e 94 b5 1c 	call	0x396a	; 0x396a <__udivmodsi4>
    3818:	da 01       	movw	r26, r20
    381a:	c9 01       	movw	r24, r18
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	9a 83       	std	Y+2, r25	; 0x02
    3820:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3822:	e0 e4       	ldi	r30, 0x40	; 64
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	89 2f       	mov	r24, r25
    382c:	99 27       	eor	r25, r25
    382e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3830:	e9 e2       	ldi	r30, 0x29	; 41
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	80 83       	st	Z, r24
}
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	0f 92       	push	r0
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3852:	eb e2       	ldi	r30, 0x2B	; 43
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	88 2f       	mov	r24, r24
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	80 72       	andi	r24, 0x20	; 32
    385e:	90 70       	andi	r25, 0x00	; 0
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	b9 f3       	breq	.-18     	; 0x3852 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3864:	ec e2       	ldi	r30, 0x2C	; 44
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    386c:	0f 90       	pop	r0
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    387c:	eb e2       	ldi	r30, 0x2B	; 43
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	88 23       	and	r24, r24
    3884:	dc f7       	brge	.-10     	; 0x387c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3886:	ec e2       	ldi	r30, 0x2C	; 44
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
}
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	00 d0       	rcall	.+0      	; 0x3898 <UART_sendString+0x6>
    3898:	0f 92       	push	r0
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	9b 83       	std	Y+3, r25	; 0x03
    38a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38a2:	19 82       	std	Y+1, r1	; 0x01
    38a4:	0e c0       	rjmp	.+28     	; 0x38c2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	28 2f       	mov	r18, r24
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	fc 01       	movw	r30, r24
    38b2:	e2 0f       	add	r30, r18
    38b4:	f3 1f       	adc	r31, r19
    38b6:	80 81       	ld	r24, Z
    38b8:	0e 94 23 1c 	call	0x3846	; 0x3846 <UART_sendByte>
		i++;
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	8f 5f       	subi	r24, 0xFF	; 255
    38c0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	28 2f       	mov	r18, r24
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	9b 81       	ldd	r25, Y+3	; 0x03
    38cc:	fc 01       	movw	r30, r24
    38ce:	e2 0f       	add	r30, r18
    38d0:	f3 1f       	adc	r31, r19
    38d2:	80 81       	ld	r24, Z
    38d4:	88 23       	and	r24, r24
    38d6:	39 f7       	brne	.-50     	; 0x38a6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    38e4:	0f 93       	push	r16
    38e6:	1f 93       	push	r17
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	00 d0       	rcall	.+0      	; 0x38ee <UART_receiveString+0xa>
    38ee:	0f 92       	push	r0
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	9b 83       	std	Y+3, r25	; 0x03
    38f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38f8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	28 2f       	mov	r18, r24
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	9b 81       	ldd	r25, Y+3	; 0x03
    3904:	8c 01       	movw	r16, r24
    3906:	02 0f       	add	r16, r18
    3908:	13 1f       	adc	r17, r19
    390a:	0e 94 3a 1c 	call	0x3874	; 0x3874 <UART_recieveByte>
    390e:	f8 01       	movw	r30, r16
    3910:	80 83       	st	Z, r24
    3912:	0f c0       	rjmp	.+30     	; 0x3932 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	8f 5f       	subi	r24, 0xFF	; 255
    3918:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	28 2f       	mov	r18, r24
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	8a 81       	ldd	r24, Y+2	; 0x02
    3922:	9b 81       	ldd	r25, Y+3	; 0x03
    3924:	8c 01       	movw	r16, r24
    3926:	02 0f       	add	r16, r18
    3928:	13 1f       	adc	r17, r19
    392a:	0e 94 3a 1c 	call	0x3874	; 0x3874 <UART_recieveByte>
    392e:	f8 01       	movw	r30, r16
    3930:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	9b 81       	ldd	r25, Y+3	; 0x03
    393c:	fc 01       	movw	r30, r24
    393e:	e2 0f       	add	r30, r18
    3940:	f3 1f       	adc	r31, r19
    3942:	80 81       	ld	r24, Z
    3944:	83 32       	cpi	r24, 0x23	; 35
    3946:	31 f7       	brne	.-52     	; 0x3914 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	8a 81       	ldd	r24, Y+2	; 0x02
    3950:	9b 81       	ldd	r25, Y+3	; 0x03
    3952:	fc 01       	movw	r30, r24
    3954:	e2 0f       	add	r30, r18
    3956:	f3 1f       	adc	r31, r19
    3958:	10 82       	st	Z, r1
}
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	1f 91       	pop	r17
    3966:	0f 91       	pop	r16
    3968:	08 95       	ret

0000396a <__udivmodsi4>:
    396a:	a1 e2       	ldi	r26, 0x21	; 33
    396c:	1a 2e       	mov	r1, r26
    396e:	aa 1b       	sub	r26, r26
    3970:	bb 1b       	sub	r27, r27
    3972:	fd 01       	movw	r30, r26
    3974:	0d c0       	rjmp	.+26     	; 0x3990 <__udivmodsi4_ep>

00003976 <__udivmodsi4_loop>:
    3976:	aa 1f       	adc	r26, r26
    3978:	bb 1f       	adc	r27, r27
    397a:	ee 1f       	adc	r30, r30
    397c:	ff 1f       	adc	r31, r31
    397e:	a2 17       	cp	r26, r18
    3980:	b3 07       	cpc	r27, r19
    3982:	e4 07       	cpc	r30, r20
    3984:	f5 07       	cpc	r31, r21
    3986:	20 f0       	brcs	.+8      	; 0x3990 <__udivmodsi4_ep>
    3988:	a2 1b       	sub	r26, r18
    398a:	b3 0b       	sbc	r27, r19
    398c:	e4 0b       	sbc	r30, r20
    398e:	f5 0b       	sbc	r31, r21

00003990 <__udivmodsi4_ep>:
    3990:	66 1f       	adc	r22, r22
    3992:	77 1f       	adc	r23, r23
    3994:	88 1f       	adc	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	1a 94       	dec	r1
    399a:	69 f7       	brne	.-38     	; 0x3976 <__udivmodsi4_loop>
    399c:	60 95       	com	r22
    399e:	70 95       	com	r23
    39a0:	80 95       	com	r24
    39a2:	90 95       	com	r25
    39a4:	9b 01       	movw	r18, r22
    39a6:	ac 01       	movw	r20, r24
    39a8:	bd 01       	movw	r22, r26
    39aa:	cf 01       	movw	r24, r30
    39ac:	08 95       	ret

000039ae <__prologue_saves__>:
    39ae:	2f 92       	push	r2
    39b0:	3f 92       	push	r3
    39b2:	4f 92       	push	r4
    39b4:	5f 92       	push	r5
    39b6:	6f 92       	push	r6
    39b8:	7f 92       	push	r7
    39ba:	8f 92       	push	r8
    39bc:	9f 92       	push	r9
    39be:	af 92       	push	r10
    39c0:	bf 92       	push	r11
    39c2:	cf 92       	push	r12
    39c4:	df 92       	push	r13
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	ca 1b       	sub	r28, r26
    39d8:	db 0b       	sbc	r29, r27
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	09 94       	ijmp

000039e6 <__epilogue_restores__>:
    39e6:	2a 88       	ldd	r2, Y+18	; 0x12
    39e8:	39 88       	ldd	r3, Y+17	; 0x11
    39ea:	48 88       	ldd	r4, Y+16	; 0x10
    39ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    39ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    39f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    39f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    39f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f8:	b9 84       	ldd	r11, Y+9	; 0x09
    39fa:	c8 84       	ldd	r12, Y+8	; 0x08
    39fc:	df 80       	ldd	r13, Y+7	; 0x07
    39fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3a00:	fd 80       	ldd	r15, Y+5	; 0x05
    3a02:	0c 81       	ldd	r16, Y+4	; 0x04
    3a04:	1b 81       	ldd	r17, Y+3	; 0x03
    3a06:	aa 81       	ldd	r26, Y+2	; 0x02
    3a08:	b9 81       	ldd	r27, Y+1	; 0x01
    3a0a:	ce 0f       	add	r28, r30
    3a0c:	d1 1d       	adc	r29, r1
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	f8 94       	cli
    3a12:	de bf       	out	0x3e, r29	; 62
    3a14:	0f be       	out	0x3f, r0	; 63
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	ed 01       	movw	r28, r26
    3a1a:	08 95       	ret

00003a1c <itoa>:
    3a1c:	fb 01       	movw	r30, r22
    3a1e:	9f 01       	movw	r18, r30
    3a20:	e8 94       	clt
    3a22:	42 30       	cpi	r20, 0x02	; 2
    3a24:	c4 f0       	brlt	.+48     	; 0x3a56 <itoa+0x3a>
    3a26:	45 32       	cpi	r20, 0x25	; 37
    3a28:	b4 f4       	brge	.+44     	; 0x3a56 <itoa+0x3a>
    3a2a:	4a 30       	cpi	r20, 0x0A	; 10
    3a2c:	29 f4       	brne	.+10     	; 0x3a38 <itoa+0x1c>
    3a2e:	97 fb       	bst	r25, 7
    3a30:	1e f4       	brtc	.+6      	; 0x3a38 <itoa+0x1c>
    3a32:	90 95       	com	r25
    3a34:	81 95       	neg	r24
    3a36:	9f 4f       	sbci	r25, 0xFF	; 255
    3a38:	64 2f       	mov	r22, r20
    3a3a:	77 27       	eor	r23, r23
    3a3c:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__udivmodhi4>
    3a40:	80 5d       	subi	r24, 0xD0	; 208
    3a42:	8a 33       	cpi	r24, 0x3A	; 58
    3a44:	0c f0       	brlt	.+2      	; 0x3a48 <itoa+0x2c>
    3a46:	89 5d       	subi	r24, 0xD9	; 217
    3a48:	81 93       	st	Z+, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	a1 f7       	brne	.-24     	; 0x3a38 <itoa+0x1c>
    3a50:	16 f4       	brtc	.+4      	; 0x3a56 <itoa+0x3a>
    3a52:	5d e2       	ldi	r21, 0x2D	; 45
    3a54:	51 93       	st	Z+, r21
    3a56:	10 82       	st	Z, r1
    3a58:	c9 01       	movw	r24, r18
    3a5a:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <strrev>

00003a5e <strrev>:
    3a5e:	dc 01       	movw	r26, r24
    3a60:	fc 01       	movw	r30, r24
    3a62:	67 2f       	mov	r22, r23
    3a64:	71 91       	ld	r23, Z+
    3a66:	77 23       	and	r23, r23
    3a68:	e1 f7       	brne	.-8      	; 0x3a62 <strrev+0x4>
    3a6a:	32 97       	sbiw	r30, 0x02	; 2
    3a6c:	04 c0       	rjmp	.+8      	; 0x3a76 <strrev+0x18>
    3a6e:	7c 91       	ld	r23, X
    3a70:	6d 93       	st	X+, r22
    3a72:	70 83       	st	Z, r23
    3a74:	62 91       	ld	r22, -Z
    3a76:	ae 17       	cp	r26, r30
    3a78:	bf 07       	cpc	r27, r31
    3a7a:	c8 f3       	brcs	.-14     	; 0x3a6e <strrev+0x10>
    3a7c:	08 95       	ret

00003a7e <__udivmodhi4>:
    3a7e:	aa 1b       	sub	r26, r26
    3a80:	bb 1b       	sub	r27, r27
    3a82:	51 e1       	ldi	r21, 0x11	; 17
    3a84:	07 c0       	rjmp	.+14     	; 0x3a94 <__udivmodhi4_ep>

00003a86 <__udivmodhi4_loop>:
    3a86:	aa 1f       	adc	r26, r26
    3a88:	bb 1f       	adc	r27, r27
    3a8a:	a6 17       	cp	r26, r22
    3a8c:	b7 07       	cpc	r27, r23
    3a8e:	10 f0       	brcs	.+4      	; 0x3a94 <__udivmodhi4_ep>
    3a90:	a6 1b       	sub	r26, r22
    3a92:	b7 0b       	sbc	r27, r23

00003a94 <__udivmodhi4_ep>:
    3a94:	88 1f       	adc	r24, r24
    3a96:	99 1f       	adc	r25, r25
    3a98:	5a 95       	dec	r21
    3a9a:	a9 f7       	brne	.-22     	; 0x3a86 <__udivmodhi4_loop>
    3a9c:	80 95       	com	r24
    3a9e:	90 95       	com	r25
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	08 95       	ret

00003aa6 <_exit>:
    3aa6:	f8 94       	cli

00003aa8 <__stop_program>:
    3aa8:	ff cf       	rjmp	.-2      	; 0x3aa8 <__stop_program>
